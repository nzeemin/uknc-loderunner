
; Размер игрового поля 240 x 200 цветных точек, элемент 8x10 цветных точек, 30 x 20 элементов
; Типы элементов:
;	0 -- пусто
;	1 -- сплошная стена
;	2 -- кирпичная стена
;	3 -- верёвка
;	4 -- чёрт
;	5 -- человек
;	6 -- сундук
;	7 -- лестница

; Сюда приходим после завершения игры
001060	JMP	021310
; Формирование экрана главного меню
001064	MTPS	#000340
001070	TRAP	000222		; вывод символа 146.
001072	CLR	011306
001076	CLR	011304
001102	MOV	#040000, R0	; Начало экрана
001106	MOV	#010010, R1	; адрес спрайта -- символ копирайта
001112	MOV	#000011, R2	; 9 раз
001116	MOV	(R1)+, (R0)	;   выводим 8 пикселей
001120	ADD	#000100, R0	;   к следующей строке растра
001124	SOB	R2, 001116	;   повторяем
001126	MOV	#000002, 001700
001134	MOV	#010062, 001702	; адрес строки "A c t i o n"
001142	MOV	001700, R1
001146	MOV	001702, R3
001152	MOV	(R3), R0
001154	EMT	000022		; вывод символа в служебную строку
001156	INC	001700
001162	ADD	#000002, 001702
001170	CMP	001700, #000010
001176	BMI	001142		; повторяем
001200	MOV	#133333, 000214
001206	TRAP	000040		; вывод символа пробел
001210	CALL	001354		; вывод названия игры
001214	MOV	#000020, R1
001220	MOV	#000160, R2
001224	EMT	000030		; точка (16,112)
001226	MOV	#000360, R1
001232	EMT	000032		; Линия в точку (240,112)
001234	IOT	
001240	TRAP	000000		; вывод строки
001242	.WORD	010350, 000006	; "1 ИГРА"
001246	IOT	
001252	TRAP	000000		; вывод строки
001254	.WORD	010360, 000024	; "2 ЗАДАНИЕ УПРАВЛЕНИЯ"
001260	IOT	
001264	TRAP	000000		; вывод строки
001266	.WORD	010404, 000021	; "3 РЕД.ЛАБИРИНТОВ"
001272	IOT	
001276	BR	001372		; переход к печати "4 ВЫХОД" и ожиданию нажатия

; Подпрограмма ???
001354	IOT	
001360	TRAP	000000		; вывод строки
001362	.WORD	010032, 000030	; "L o d e     R u n n e r"
001366	MOV	PC, R0
001370	RETURN	
001372	TRAP	000000
001374	.WORD	010426, 000007	; "4 ВЫХОД"
001400	IOT	
001404	EMT	000006		; Ожидание нажатия клавиши
; Сюда приходим после нажатия клавиши в меню
001406	CMPB	R0, #000022
001412	BEQ	001430
001414	CMPB	R0, #000040	; Пробел?
001420	BEQ	001430		; Да => переходим
001422	CMP	R0, #000012
001426	BNE	001504

001430	EMT	000026		; считывание координат курсора
001432	CMP	R2, #000016	; Пункт 1 ИГРА ?
001436	BNE	001446		; Нет => переходим
001440	CALL	014600		; ИГРА
001444  BR      001060

001504	CMP	R0, #000032
001510	BNE	001530
001512	EMT	000026
001514	CMP	R2, #000017
001520	BMI	001404
001522	DEC	R2
001524	EMT	000024
001526	BR	001404
001530	CMP	R0, #000033
001534	BNE	001404
001536	EMT	000026
001540	CMP	R2, #000021
001544	BPL	001404
001546	INC	R2
001550	EMT	000024
001552	BR	001404

; Блок переменных
;
001700	.WORD
001702	.WORD			; Количество людей??? очищается, инкрементируется
001704	.WORD			; Адрес в образе лабиринта, инициализируется 011410
001706	.WORD			; Адрес текущего слова для текущего лабиринта
001710	.WORD			; Номер лабиринта; инициализируется из 001770
001712	.WORD			; Счетчик строк при рисовании лабиринта: инициализируется 20., декрементируется
001714	.WORD			; Адрес начала текущего лабиринта -- определения в виде триплетов; инициализируется 023640 + 240. * N
001716	.WORD			; ??? адрес куда пишем по 5 слов, инициализируется 022070, для элемента 4 -- чертей
001720	.WORD			; Адрес в растре: инициализируется 043202, добавляется по 640.
				;   в игровой логике: инициализируется 024000, сравнивается с 024000
001722	.WORD			; ??? инициализируется 012600, 013160, 
001724	.WORD			; ??? инициализируется 013660, 013704
; Запись об игровом объекте, из 5-ти слов, копируется из 011100
001726	.WORD			; Адрес в растре
001730	.WORD			; Адрес в образе лабиринта
001732	.WORD			; ??? 0/1/2/3; 2 -- падаем
001734	.WORD			; ??? 0/1/2/3/4
001736	.WORD			; Смещение по высоте ??? если не 0 то спрайт выводится выше на 5 строк
;
001740	.WORD			; ??? сравнивается с 011200

001754	.WORD			; ??? проверяется на 0
001756	.WORD			; Количество жизней: инициализируется 10., декрементируется
001760	.WORD			; ??? инициализируется 1, очищается, инкрементируется
001762	.WORD			; Количество чертей; не больше 20.
001764	.WORD			; ???
001766	.WORD			; Количество сундуков осталось
001770	.WORD			; Номер текущего уровня
001772
001774	.WORD			; ??? инициализируется 011410 + байтовое значение, зависит от лабиринта
001776	.WORD			; Текущее количество очков

; Подпрограмма подготовки экрана: очистка, рисование рамки
004030	CALL	021264		; установка курсора в (0,0), очистка строк 26-231
004034	NOP	
; Рисование прямоугольной рамки игрового поля
004036	MOV	#000001, R0
004042	MOV	#000007, R1
004046	MOV	#000011, R2
004052	EMT	000030		; Точка (7,9)
004054	MOV	#000001, R0
004060	MOV	#000370, R1
004064	MOV	#000011, R2
004070	EMT	000032		; Вектор в точку (248,9)
004072	MOV	#000001, R0
004076	MOV	#000370, R1
004102	MOV	#000322, R2
004106	EMT	000032		; Вектор в точку (248,210)
004110	MOV	#000001, R0
004114	MOV	#000007, R1
004120	MOV	#000322, R2
004124	EMT	000032		; Вектор в точку (7,210)
004126	MOV	#000001, R0
004132	MOV	#000007, R1
004136	MOV	#000011, R2
004142	EMT	000032		; Вектор в точку (7,9)
004144	MOV	#000001, R1
004150	MOV	#000001, R2
004154	EMT	000024		; Курсор (1,1)
004156	RETURN	

005000	NOP	
005002	CLR	001702		; Очищаем количество людей???
005006	CLR	001762		; Очищаем количество чертей
005012	CLR	001766		; Очищаем количество сундуков
005016	MOV	#022070, 001716	; Начало массива чертей
005024	MOV	#023640, R1
005030	MOV	001710, R0	; Номер лабиринта
005034	ADD	#000360, R1	; 240. байт занимает один лабиринт
005040	SOB	R0, 005034	; повторяем пока не найдём нужный лабиринт
005042	MOV	R1, 001714	; Сохраняем адрес начала текущего лабиринта
005046	MOV	#011410, 001704	; Адрес начала образа лабиринта
005054	MOV	R1, 001706	; Сохраняем адрес текущего лабиринта
005060	MOV	#043202, 001720	; начальное значение адреса в растре (потом будем добавлять по 640.)
005066	MOV	#000024, 001712	; 20. строк
; Цикл по строкам
005074	MOV	001720, R3
005100	MOV	#000006, R5	; 6 слов по 5 триплетов = 30 элементов в строке
; Цикл по R5 -- по словам
005104	MOV	001706, R1	; Получаем адрес откуда читаем лабиринт
005110	MOV	(R1), R0	; Читаем очередное слово
005112	MOV	#000005, R4	; 5 -- количество триплетов в слове
; Цикл по R4 -- по триплетам в слове
005116	MOV	R0, R2
005120	BIC	#107777, R2	; оставить только биты 12-14 -- верхний триплет
005124	MOV	#000014, R1	; 12. раз
005130	ROR	R2		; повторить битовый сдвиг вправо
005132	SOB	R1, 005130	; в итоге оставленные биты передвинуты в 0-2 биты
; Дальше рисуем элемент для прочитанного триплета
005134	MOV	001704, R1	; Получаем адрес в образе лабиринта
005140	CMP	R2, #000006	; R2 = 6 ? сундук?
005144	BNE	005160		; нет => переходим
; R2 = 6 -- сундук
005146	BR	005456
;
005150	MOVB	R2, (R1)
005152	BR	005270
;
005154	INC	001766		; количество сундуков
005160	MOVB	R2, (R1)
005162	CMP	R2, #000004	; R2 = 4 ? это чёрт?
005166	BNE	005240		; Нет => переходим
; R2 = 4 -- чёрт
005170	CMP	001762, #000024	; чертей меньше 20. ?
005176	BMI	005210		; да => переходим
005200	CLR	R2
005202	NOP
005204	MOVB	R2, (R1)
005206	BR	005270
; Сохраняем чёртика
005210	INC	001762		; чертей на один больше
005214	MOV	001716, R2	; Адрес 5-словной записи объекта
005220	MOV	R3, (R2)+	; сохраняем адрес в растре
005222	MOV	R1, (R2)+	; сохраняем адрес в образе лабиринта
005224	CLR	(R2)+
005226	CLR	(R2)+
005230	CLR	(R2)+
005232	MOV	R2, 001716	; Сохраняем новый адрес
005236	BR	005422
; R2 != 4
005240	BR	005430
; Создаём человечка: подготовка объекта из 5-ти слов по 011100
005242	MOV	#011100, R2	; Адрес игровой записи
005246	MOV	R3, (R2)+	; Адрес в растре
005250	MOV	R1, (R2)+	; Адрес в образе лабиринта
005252	CLR	(R2)+
005254	CLR	(R2)+
005256	CLR	(R2)+
005260	MOV	#000005, R2	; 5 -- человечек
005264	MOVB	R2, (R1)	; пишем в образ лабиринта
005266	NOP	
; Переходим к следующему триплету
005270	CLC			; Сдвигаем на три разряда влево
005272	ROL	R0              ; <
005274	ROL	R0              ; <
005276	ROL	R0              ; <
005300	CALL	016712
; Получаем адрес спрайта по индексу R2
005304	MOV	#013540, R1	; Начало таблицы спрайтов
005310	TST	R2		
005312	BEQ	005322
005314	ADD	#000024, R1	; Переход к следующему спрайту
005320	SOB	R2, 005314
; Приступаем к рисованию спрайта; R1 = адрес спрайта в 10 слов -- 8x10 цветных пикселей
005322	MOV	#000012, R2	; Повторить для 10. строк
005326	MOV	(R1)+, (R3)	; записываем 8 цветных пикселей в растр
005330	ADD	#000100, R3	; плюс 64. -- переход к следующей строке растра
005334	SOB	R2, 005326	; продолжаем цикл по строкам
005336	SUB	#001176, R3	; минус 638. -- возвращаемся на 10. строк назад, плюс 8 цветных пикселей вперёд
005342	DEC	R4		; Уменьшаем счётчик триплетов
005344	BNE	005116		; Если не последний триплет, то переходим
005346	ADD	#000002, 001706	; инкремент адреса откуда читаем -- к следующему слову
005354	DEC	R5		; цикл по словам
005356	BNE	005104		; переход если не закончили
; Закончили рисовать строку лабиринта
005360	ADD	#001200, 001720	; добавляем 640.
005366	DEC	001712		; Продолжаем цикл по строкам
005372	BNE	005074		;   по значению (001712)
; Закончили рисовать лабиринт -- дальше какая-то подготовка адреса
005374	MOV	001710, R2	; Берём номер лабиринта
005400	NOP	
005402	ADD	#011000, R2	; Добавляем адрес 011000
005406	MOVB	(R2), R3	; и получаем оттуда байт
005410	ADD	#011410, R3	; Добавляем адрес начала образа лабиринта
005414	MOV	R3, 001774	; и сохраняем -- адрес выхода в лабиринте
005420	RETURN	
;
005422	MOV	#000004, R2
005426	BR	005270		; Переходим к следующему триплету, спрайт и продолжаем
; R2 != 4
005430	CMP	R2, #000005
005434	BNE	005270		; Переходим к следующему триплету, спрайт и продолжаем
; R2 = 5 -- человек
005436	TST	001702		; Количество человеков нулевое?
005442	BEQ	005450		; да => переходим
005444	CLR	R2
005446	BR      Z05150
;
005450	INC	001702		; теперь есть один человек
005454	BR	005242		; Создаём человечка
; R2 = 6 -- сундук
005456	TST	011306
005462	BEQ	005154
005464	TSTB	(R1)
005466	BNE	005154
005470	CLR	R2
005472	BR	005270

005474	.WORD	0		; ???
005476	.WORD	0		; ???

; Подпрограмма вывода игрового объекта: R2 = адрес в растре, R3 = адрес в образе лабиринта
005500	CMP	001720, #024000	; Начинаем с поиска игровых объектов
005506	BEQ	005526		; таких не было => выводим новый
005510	MOV	#024000, R4
005514	CMP	(R4)+, R3	; это он?
005516	BEQ	005602		; да => выходим
005520	CMP	R4, 001720	; перебрали все?
005524	BNE	005514		; нет => продолжаем
005526	MOVB	(R3), R5	; получаем номер спрайта
005530	MOV	#013540, R4	; Начало таблицы спрайтов, по 10. слов на спрайт
005534	TSTB	R5		; спрайт #0 ?
005536	BEQ	005546		; да => переходим
005540	ADD	#000024, R4	;   плюс 20. -- следующий спрайт
005544	SOB	R5, 005540	;   повторяем
005546	MOV	#000012, R5	; 10 раз
005552	MOV	(R4)+, (R2)	;   выводим 8 цветных пикселей
005554	ADD	#000100, R2	;   плюс одна строка растра
005560	SOB	R5, 005552	;   повторяем
005562	SUB	#001200, R2	; возвращаем адрес растра обратно на 10. строк вверх
005566	MOV	001720, R4	; Теперь запоминаем что объект выводился
005572	MOV	R3, (R4)	; сохраняем адрес в образе лабиринта
005574	ADD	#000002, 001720
005602	RETURN	
;
005604	JMP	017700
; Вывод поверх следующего элемента
005610	ADD	#000002, R2	; плюс 8 пикселей в растре
005614	INC	R3		; к следующему элементу
005616	CALL	005500		; Вывод игрового объекта
005622	SUB	#000002, R2	; минус 8 пикселей в растре
005626	MOV	#000012, R5	; 10 раз
005632	BIS	(R0)+, (R2)+	;   выводим поверх
005634	BIS	(R0)+, (R2)	;   выводим поверх
005636	ADD	#000076, R2	;   следующая строка растра
005642	SOB	R5, 005632	;   повторяем
005644	RETURN	
;
005646	JMP	017726
; Вывод поверх предыдущего элемента
005652	SUB	#000002, R2	; минус 8 пикселей в растре
005656	DEC	R3		; к предыдущему элементу
005660	CALL	005500		; Вывод игрового объекта
005664	MOV	#000012, R5	; 10 раз
005670	BIS	(R0)+, (R2)+	;   выводим поверх
005672	BIS	(R0)+, (R2)	;   выводим поверх
005674	ADD	#000076, R2	;   следующая строка растра
005700	SOB	R5, 005670	;   повторяем
005702	RETURN	
; Подпрограмма вывода ???; R2 = адрес в растре, R0 = адрес спрайта
005704	CMP	R0, #012000	; R0 < 012000 ?
005710	BMI	005740		; да => вывод всего на 5 строк растра ниже
005712	ADD	#001200, R2	; плюс 10 строк в растре
005716	CALL	005500		; Вывод игрового объекта
005722	SUB	#001200, R2	; минус 10 строк в растре
005726	SUB	#000036, R3	; минус одна строка в образе лабиринта
005732	CALL	005500		; Вывод игрового объекта
005736	BR	005770
005740	ADD	#000500, R2	; плюс 5 строк в растре
005744	CALL	005500		; Вывод игрового объекта
005750	SUB	#001200, R2	; минус 10 строк в растре
005754	SUB	#000036, R3	; минус одна строка в образе лабиринта
005760	CALL	005500		; Вывод игрового объекта
005764	ADD	#000500, R2	; плюс 5 строк в растре
005770	MOV	#000012, R5	; 10 раз
005774	BIS	(R0)+, (R2)	;   рисуем поверх
005776	ADD	#000100, R2	;   следующая строка растра
006002	SOB	R5, 005774	;   повторяем
006004	RETURN	
; Подпрограмма вывода ???; R2 = адрес в растре, R0 = адрес спрайта
006006	CMP	R0, #012000	; R0 < 012000 ?
006012	BMI	006046		; да => вывод всего на 5 строк выше
006014	SUB	#001200, R2
006020	CALL	005500		; Вывод игрового объекта
006024	ADD	#001200, R2	; плюс 10 строк растра
006030	ADD	#000036, R3	; плюс одна строка в образе лабиринта
006034	NOP	
006036	NOP	
006040	CALL	005500		; Вывод игрового объекта
006044	BR	006076
006046	SUB	#000500, R2	; минус 5 строк растра
006052	CALL	005500		; Вывод игрового объекта
006056	ADD	#001200, R2	; плюс 10 строк растра
006062	ADD	#000036, R3	; плюс одна строка в образе лабиринта
006066	CALL	005500		; Вывод игрового объекта
006072	SUB	#000500, R2	; минус 5 строк растра
006076	MOV	#000012, R5	; 10 раз
006102	BIS	(R0)+, (R2)	;   рисуем поверх
006104	ADD	#000100, R2	;   следующая строка растра
006110	SOB	R5, 006102	;   повторяем
006112	RETURN	
; Подпрограмма ??? игровая логика; R0 = адрес в образе лабиринта
006114	CMP	R1, #000001
006120	BNE	006130
006122	CALL	006152
006126	BR	006150
006130	CMP	R1, #000003
006134	BNE	006144
006136	CALL	006152
006142	BR	006150
006144	CALL	016366
006150	RETURN	
; Подпрограмма ??? игровая логика
006152	ADD	#000036, R0	; к следующей строке лабиринта
006156	TSTB	(R0)		; под нами пустой элемент ?
006160	BNE	006172		; нет => переходим
006162	MOV	#000002, 001732	; состояние -- падаем
006170	BR	006334		; на выход
006172	CMPB	(R0), #000007	; под нами лестница ?
006176	BNE	006214		; нет => переходим
006200	MOV	#000002, R4	; вниз
006204	CALL	006460		; Выбор направления??
006210	TST	R5
006212	BNE	006334		; на выход
006214	SUB	#000036, R0	; возвращаемся к текущему элементу лабиринта
006220	CMPB	(R0), #000007	; мы на лестнице ?
006224	BNE	006254		; нет => переходим
006226	SUB	#000036, R0	; к предыдущей строке лабиринта
006232	CMPB	(R0), #000007	; над нами лестница ?
006236	BNE	006254		; нет => переходим
006240	MOV	#000004, R4	; вверх
006244	CALL	006460		; Выбор направления??
006250	TST	R5
006252	BNE	006334		; на выход
006254	JMP	017404
006260	INC	R0
006262	CMP	R1, #000001
006266	BEQ	006274
006270	SUB	#000002, R0
006274	CMPB	(R0), #000001
006300	BMI	006332
006302	CMPB	(R0), #000002
006306	BHI	006332
006310	CMP	R1, #000001
006314	BNE	006324
006316	MOV	#000003, R3
006322	BR	006334		; на выход
006324	MOV	#000001, R3
006330	BR	006334		; на выход
006332	MOV	R1, R3
006334	RETURN	
;
006336	JMP	016422
;
006346	CALL	016556
006352	BR	006564
;
006354	MOV	#3, R5
006360	CALL	016556
006364	BR	006576
006366	NOP
006370	NOP
006372	NOP
006374	NOP
006376	NOP
006400	NOP
006402	NOP
006404	CMP	R1, #000002
006410	BNE	006420	
006412	ADD	#000037, R0	; к следующей строке +1 элемент
006416	BR	006424
006420	SUB	#000035, R0	; к предыдущей строке +1 элемент
006424	CMPB	(R0), #000007	; лестница ?
006430	BNE	006436		; нет => переходим
006432	MOV	R1, R3
006434	BR	006456
006436	CMP	R1, #000002
006442	BNE	006452
006444	MOV	#000004, R3
006450	BR	006456
006452	MOV	#000002, R3
006456	RETURN	
; Подпрограмма ???
006460	MOV	011102, R2
006464	CALL	006572
006470	MOV	R3, R5
006472	MOV	R2, 001706
006476	MOV	R0, R2
006500	CALL	006572
006504	CMP	R3, R5
006506	BMI	006520
006510	CMP	R4, #000004
006514	BEQ	006562
006516	BR	006532
006520	CMP	R3, R5
006522	BEQ	006532
006524	CMP	R4, #000002
006530	BEQ	006562
006532	CMP	R2, 001706
006536	BMI	006550
006540	CMP	R4, #000003
006544	BEQ	006562
006546	BR	006556
006550	CMP	R4, #000001
006554	BEQ	006562
006556	JMP	023150
006562	JMP	023202
006566	NOP
006570	RETURN	
; Подпрограмма ???
006572	CLR	R3
006574	SUB	#011410, R2	; убираем адрес начала лабиринта, оставляя индекс
006600	INC	R3
006602	CMP	R2, #000036	; R2 < 30. ?
006606	BMI	006570		; переход на RETURN
006610	SUB	#000036, R2	; минус 30. -- к предыдущей строке лабиринта
006614	BR	006600
; Подпрограмма ???
006616	MOV	001730, R3	; Адрес в образе лабиринта
006622	MOV	001726, R2	; Адрес в растре
006626	CALL	020376
006632	NOP	
006634	NOP	
006636	ADD	#000500, R2	; ниже на 5 строк растра
006642	MOV	#000012, R5	; 10. раз
006646	MOV	(R0)+, (R2)	;   выводим 8 цветных пикселей
006650	ADD	#000100, R2	;   плюс одна строка растра
006654	SOB	R5, 006646	;   повторяем
006656	SUB	#001200, R2	; возвращаемся на 10. строк выше
006662	MOV	R2, 001726	; сохраняем новый адрес в растре
006666	INC	001736
006672	CMP	001736, #000002
006700	BNE	006760		; не равно => переход на RETURN
; R2 = 30.
006702	CLR	001736
006706	MOV	001730, R2	; берём адрес в образе лабиринта
006712	ADD	#000036, 001730	; добавляем 30. -- к следующей строке
006720	ADD	#000074, R2	; плюс 60. -- на две строки вниз
006724	BR	006762
006730	TST	001760
006734	BNE	006744
006736	CMPB	(R2), #000010
006742	BEQ	006756
006744	CLR	001732
006750	CLR	001734
006754	BR	006760
006760	RETURN	
006762	TSTB	(R2)
006764	BEQ	006760
006766	CMPB	(R2), #000006
006772	BEQ	006760
006774	BR	006730
;
006776	.WORD	0		; ???
; Подпрограмма ??? игровая логика; по адресу 001726 игровой объект из 5-ти слов
007000	MOV	#013160, 001722
007006	MOV	#013704, 001724
007014	MOV	#024000, 001720
007022	MOV	001732, R0	; берём состояние объекта
007026	CMP	R0, #000001
007032	BNE	007040
007034	JMP	007776
;
007040	CMP	R0, #000002	; падаем ?
007044	BNE	007062		; нет => переходим
007046	MOV	001724, R0
007052	CALL	006616
007056	JMP	007776
007062	JMP	016336
;
007066	NOP
;
007070	MOV	177714, R0
007074	TST	R0
007076	BR	007104
007100	JMP	007776
007104	CMP	R0, 001752
007110	BNE	007266
007112	MOV	001730, R1
007116	ADD	#000036, R1
007122	CMPB	(R1), #2
007126	BNE	007266
007130	BR	007170
;
007132	TSTB	177660		; Нажата клавиша?
007136	BPL	007262		; нет => переходим
007140	MOV	177662, R0	; код нажатой клавиши
007144	CMPB	R0, 001752
007150	BNE	007262
007152	MOV	001730, R1	; берём адрес в образе лабиринта
007156	ADD	#000036, R1	; к следующей строке лабиринта
007162	CMPB	(R1), #000002	; под нами кирпичная стена ?
007166	BNE	007262		; нет => переходим
007170	CMP	001740, #011270
007176	BHI	007262
007200	JMP	016252
007204	NOP	
007206	CALL	017014
007212	CALL	017102
007216	MOV	#000012, R5	; 10. раз
007222	CLR	(R2)		;   очищаем 8 пикселей
007224	ADD	#000100, R2	;   к следующей строке
007230	SOB	R5, 007222	;   повторяем
007232	MOVB	#000010, (R1)
007236	MOV	001740, R3
007242	MOV	R1, (R3)+
007244	SUB	#001200, R2	; на 10. строк выше
007250	MOV	R2, (R3)+
007252	MOV	011310, (R3)+
007256	MOV	R3, 001740
007262	CALL	017502
007266	MOV	001730, R1	; берём адрес в образе лабиринта
007272	ADD	#000036, R1	; добавляем 30. -- к следующей строке
007276	JMP	016300
007302	CMPB	(R1), #000010
007306	BNE	007336
; Вход: переходим сюда когда под игровым объектом пусто -- проваливается
007310	MOV	#000002, 001732	; состояние -- падаем
007316	CALL	023052
007322	MOV	001724, R0
007326	CALL	006616
007332	JMP	007776
007336	MOV	001730, R1	; берём адрес в образе лабиринта
007342	CMP	R0, 001744
007346	BNE	007570
; Вход: ???
007350	DEC	R1
007352	CMPB	(R1), #000001
007356	BMI	007366
007360	CMPB	(R1), #000003
007364	BMI	007560
007366	CMP	001734, #000003
007374	BEQ	007452
007376	TST	001736
007402	BEQ	007452
007404	JMP	014572
007410	CMP	001734, #000003
007416	BNE	007430
007420	CLR	001734
007424	JMP	016204
007430	JMP	014572
;
007434	SUB	001736, R5
007440	MOV	R5, 001736
007444	BR	007452
007446	JMP	016250
;
007452	MOV	001730, R3	; берём адрес в образе лабиринта
007456	MOV	001726, R2	; берём адрес в растре
007462	CALL	015672
007466	MOV	001736, R5
007472	TST	R5
007474	BEQ	007504
007476	ADD	#000050, R0	; 40. это похоже на длину 4-х спрайтов??
007502	SOB	R5, 007476
007504	CALL	005646
007510	INC	001736
007514	CMP	001736, #000003
007522	BNE	007546
007524	SUB	#000002, 001726	; на 8 цветных пикселей левее
007532	DEC	001730		; адрес в лабиринте -- к предыдущему элементу
007536	CLR	001732
007542	CLR	001736
007546	MOV	#000003, 001734
007554	JMP	007776
007560	JMP	007410
;
007564	JMP	007776
;
007570	CMP	R0, 001742
007574	BNE	007772
007576	INC	R1
007600	CMPB	(R1), #000001
007604	BMI	007614
007606	CMPB	(R1), #000003
007612	BMI	007636
007614	CMP	001734, #000001
007622	BEQ	007676
007624	TST	001736
007630	BEQ	007676
007632	JMP	014572
007636	CMP	001734, #000001
007644	BNE	007656
007646	CLR	001734
007652	JMP	016204
007656	JMP	014572
;
007662	.WORD	172052
;
007670	BR	007676
007672	JMP	016270
;
007676	MOV	001730, R3	; берём адрес в образе лабиринта
007702	MOV	001726, R2	; берём адрес в растре
007706	MOV	001722, R0	; адрес начала спрайтов объекта??
007712	MOV	001736, R5
007716	TST	R5
007720	BEQ	007730
007722	ADD	#000050, R0
007726	SOB	R5, 007722
007730	CALL	005604
007734	INC	001736
007740	CMP	001736, #000003
007746	BEQ	007762
007750	MOV	#000001, 001734
007756	JMP	007776
007762	CLR	001732
007766	JMP	014044
007772	JMP	014066
007776	RETURN	

010000				; строка ???

; Символ копирайта -- 9 слов
010010	.WORD	

010032	.STR	"L o d e     R u n n e r"

010076  CLR     011314
010102  JMP     015636
;
010106	TST	011110
010112	BNE	010120
010114	MOV	R0, 011314
010120	RETURN	
010122	ADD	#000036, R1	; к следующей строке лабиринта
010126	CMPB	(R1), #000003	; верёвка?
010132	BNE	010140		; нет => переходим
010134	JMP	014376
010140	JMP	014362
010144	SUB	#000002, R0	; смотрим налево
010150	CMPB	(R0), #000001	; слева пусто?
010154	BMI	010164
010156	CMPB	(R0), #000003	; слева стена?
010162	BMI	010212		; да => переходим
010164	MOV	#000003, R4	; налево
010170	CALL	006460		; Выбор направления??
010174	TST	001704
010200	BNE	010206
010202	MOV	R4, R3
010204	RETURN	
010206	TST	R5
010210	BNE	010204
010212	ADD	#000037, R0
010216	CMPB	(R0), #000006	; сундук?
010222	BMI	010250
010224	MOV	#2, R4
010230	CALL	006460
010234	TST	001704
010240	BNE	010244
010242	BR	010202
010244	TST	R5
010246	BNE	010204
010250	SUB	#000036, R0
010254	CMPB	(R0), #000007	; лестница?
010260	BNE	010316		; нет => переходим
010262  SUB     #000036, R0
010266  CMPB    (R0), #000007
010272  BNE     010316
010274  MOV     #000004, R4
010300  CALL    006460
010304  TST     001704
010310  BEQ     010202
010312  TST     R5
010314  BNE     010204
010316	TST	001704
010322	BEQ	010334
010324	CLR	001704
010330	JMP	017410
;
010334	MOV	001730, R0	; берём адрес в образе лабиринта
010340	JMP	006260


; Подпрограмма ???
011040	INC	001714		; 
011044	TST	001754
011050	BEQ	011056
;
011056	RETURN	

; Подпрограмма ???
011066	CLR	001714
011072	JMP	017004


011000	.BYTE			; ??? здесь массив, выбирается байт по (011000 + N), где N -- номер лабиринта

; Игровой объект из 5-ти слов -- человечек, 5 слов отсюда копируются в 001726
011100	.WORD			; Адрес в растре
011102	.WORD			; Адрес в образе лабиринта
011104	.WORD
011106	.WORD
011110	.WORD

011144	.STR	"НЕ ТОТ ТИП ФАЙЛА !!!"

011302	.WORD			; ??? очищается, инкрементируется, сравнивается с 10.
011304	.WORD			; ??? очищается, инкрементируется
011306	.WORD			; ??? очищается, инкрементируется
011310	.WORD			; ???
011312	.WORD			; ???

; Образ текущего лабиринта, байт на элемент, 30. байт на строку, 600 байт всего
011410	.BYTE


; Начало области спрайтов, по 10. слов на спрайт, 8 спрайтов
013540	.WORD	000000 000000 000000 000000 000000 000000 000000 000000 000000 0000000
013564  ...

014000

014044	ADD	#000002, 001726	; Плюс одно слово для адреса в растре
014052	INC	001730		; К следующему элементу в образе лабиринта
014056	CLR	001736
014062	JMP	007750
014066	CMP	R0, 001746
014072	BNE	014350
014074	CMPB	(R1), #000007
014100	BNE	014264
014102	SUB	#000036, R1
014106	CMPB	(R1), #000007
014112	BNE	014260
014114	CMP	001734, #000004
014122	BEQ	014140
014124	TST	001736
014130	BEQ	014140
014132	JMP	014572
014136  NOP
014140	MOV	001730, R3	; берём адрес в образе лабиринта
014144	NOP	
014146	NOP	
014150	TST	001736
014154	BNE	014164
014156	MOV	#010700, R0
014162	BR	014170
014164	MOV	#013660, R0
014170	TST	001760
014174	BNE	014202
014176	ADD	#000024, R0
014202	SUB	#000500, 001726	; Адрес растра на 5 строк выше
014210	CALL	015716
014214	INC	001736
014220	CMP	001736, #000002
014226	BNE	014246
014230	SUB	#000036, 001730	; Адрес в лабиринте -- на строку выше
014236	CLR	001732
014242	CLR	001736
014246	MOV	#000004, 001734
014254	JMP	007776
014260	ADD	#000036, R1
014264	MOV	001734, R0
014270	TST	R0
014272	BEQ	014344
014274	CMP	R0, #000004
014300	BNE	014312
014302	CLR	001734
014306	JMP	016204
014312	CMP	R0, #000001
014316	BNE	014324
014320	JMP	007576
014324	CMP	R0, #000002
014330	BEQ	014356
014332	CMP	R0, #000003
014336	BNE	014344
014340	JMP	007350
014344	JMP	007776
014350	CMP	R0, 001750
014354	BNE	014554
014356	JMP	010122
014362	CMPB	(R1), #000007
014366	BEQ	014376
014370	SUB	#000036, R1
014374	BR	014544
014376	CMP	001734, #000002
014404	BEQ	014424
014406	TST	001736
014412	BEQ	014424
014414	JMP	014572
014420	NOP
014422	NOP
014424	MOV	001730, R3	; берём адрес в образе лабиринта
014430	NOP	
014432	NOP	
014434	TST	001736
014440	BNE	014450
014442	MOV	#010700, R0
014446	BR	014454
014450	MOV	#013660, R0
014454	TST	001760
014460	BNE	014466
014462	ADD	#000024, R0
014466	ADD	#000500, 001726	; Плюс 5 строк в растре
014474	CALL	015730
014500	INC	001736
014504	CMP	001736, #000002
014512	BNE	014532
014514	ADD	#000036, 001730	; Адрес в лабиринте на строку ниже
014522	CLR	001732
014526	CLR	001736
014532	MOV	#000002, 001734
014540	JMP	007776
014544	CMP	001734, #000002
014552	BEQ	014302
014554	MOV	001734, R0
014560	CMP	R0, #000004
014564	BNE	014312
014566	JMP	014074
014572	MOV	001730, R1	; берём адрес в образе лабиринта
014576	BR	014554
; Подпрограмма: вызывается по выбору пункта ИГРА в меню
014600	MOV	#000012, 001756	; 10. -- начальное количество жизней
014606	CALL	020540		; Сбрасываем Номер лабиринта в 1
014612	NOP	
014614	CALL	020364
014620	CALL	016752
; Вход: после очередной смерти человечка
014624	MOV	001770, 001710	; Номер лабиринта
014632	CALL	004030		; очистка экрана и рисование рамки игрового поля
014636	CALL	015760		; Отрисовать лабиринт
014642	CALL	021636		; ??? Переход к ожиданию перед игрой
014646	CALL	011066
014652	CALL	020172		; Вывод статусной строки
014656	MOV	#011200, 001740
014664	CLR	001760
014670	MOV	#011100, R0	; Отсюда -- из игровой записи человечка
014674	MOV	#001726, R1	;   сюда
014700	MOV	#000005, R2	;   5 раз
014704	MOV	(R0)+, (R1)+	;   копируем пословно
014706	SOB	R2, 014704	;   повторяем
014710	CALL	007000
014714	MOV	#011100, R0	; Сюда -- в игровую запись человечка
014720	MOV	#001726, R1	;   отсюда
014724	MOV	#000005, R2	;   5 раз
014730	MOV	(R1)+, (R0)+    ;   копируем пословно
014732	SOB	R2, 014730	;   повторяем
014734	MOV	#012600, 001722
014742	MOV	#013660, 001724
014750	MOV	#000001, 001760
;
014756	MOV	001760, R5	; Получаем счётчик ???
014762	MOV	#022056, R0	;   начальный адрес
014766	ADD	#000012, R0	;   плюс 10.
014772	SOB	R5, 014766	;   повторяем
014774	MOV	R0, 001764      ; Сохраняем адрес
015000	MOV	#001726, R1	;   сюда
015004	MOV	#000005, R2     ;   5 раз
015010	MOV	(R0)+, (R1)+	;   копируем пословно
015012	SOB	R2, 015010	;   повторяем
015014	MOV	001732, R0	; берём состояние объекта
015020	CMP	R0, #000001
015024	BEQ	015332
015026	CMP	R0, #000002	; падаем ?
015032	BNE	015046		; нет => переходим
015034	MOV	001724, R0
015040	CALL	006616
015044	BR	015332
015046	TST	001736
015052	BNE	015074
015054	MOV	001730, R0	; берём адрес в образе лабиринта
015060	MOV	001734, R1
015064	CALL	006114
015070	MOV	R3, R0
015072	BR	015106
015074	MOV	001734, R0
015100	MOV	001730, R1	; берём адрес в образе лабиринта
015104	BR	015136
015106	MOV	R0, R4
015110	CALL	017544
015114	TST	R5
015116	BNE	015100
015120	INC	001736
015124	JMP	017152
015130	MOV	001730, R1	; берём адрес в образе лабиринта
015134	BR	015262
015136	ADD	#000036, R1	; плюс 30. -- на строку ниже
015142	CMPB	(R1), #000000	; пустой элемент?
015146	BNE	015156		; нет => переходим
; Ниже на строку пусто -- проваливается
015150	CALL	007310
015154	BR	015332
015156	CMPB	(R1), #000010
015162	BNE	015130
015164	NOP	
015166	NOP	
015170	NOP	
015172	NOP	
015174	MOVB	#000005, (R1)
015200	MOV	001726, R2	; берём адрес в растре
015204	MOV	001730, R3	; берём адрес в образе лабиринта
015210	CALL	005526
015214	ADD	#000002, R2
015220	INC	R3
015222	CALL	005526
015226	ADD	#001176, R2
015232	MOV	#000012, R5	; 10. раз
015236	MOV	001724, R0
015242	MOV	(R0)+, (R2)	;   заполняем 8 пикселей
015244	ADD	#000100, R2	;   к следующей строке растра
015250	SOB	R5, 015242	;   повторяем
015252	JMP	016600
015256	NOP
015260	BR	015332
015262	CMP	R0, #000003	; верёвка ?
015266	BNE	015276
015270	CALL	007350		; Сдвигается один чёрт
015274	BR	015332
015276	CMP	R0, #000001	; сплошная стена ?
015302	BNE	015312		; нет => переходим
015304	CALL	007576
015310	BR	015332
015312	CMP	R0, #000004	; чёрт ?
015316	BNE	015326
; R0 = 4
015320	CALL	014074
015324	BR	015332
015326	CALL	014356
;
015332	MOV	001764, R0	; Получаем адрес куда копировать
015336	MOV	#001726, R1	;   отсюда
015342	MOV	#000005, R2	;   5 раз
015346	MOV	(R1)+, (R0)+	;   копируем пословно
015350	SOB	R2, 015346	;   повторяем
015352	INC	001760
015356	CMP	001760, 001762
015364	BHI	015372
015366	JMP	014756
015372	CALL	016212
015376	JMP	017514
015402	CMP	(R0), #000057
015406	BMI	015430
015410	CLR	(R0)
015412	CALL	020302
015416	CALL	020236
015422	NOP	
015424	NOP	
015426	NOP	
015430	MOV	011102, R0
015434	CMPB	(R0), #000006	; это сундук?
015440	BNE	015510		; нет => переходим
015442	NOP	
015444	ADD	#000012, 001776	; плюс 10. очков
015452	INC	011302
015456	CLRB	(R0)		; удаляем сундук из образа лабиринта
015460	CALL	017126
015464	CMP	011302, #000012
015472	BMI	015510
015474	INC	001756
015500	CLR	011302
015504	CALL	020332
015510	TST	001766		; Сундуков больше не осталось?
015514	BNE	015604		; остались => переходим
015516	MOV	001774, R3	; берём адрес выхода
015522	SUB	#011410, R3	; вычитаем адрес начала образа лабиринта
015526  MOV     #043202, R1
015532  ADD     R3, R1
015534  ADD     R3, R1
015536  MOV     #010750, R3	; спрайт выхода
015542  MOV     #000012, R2	; 10. строк
015546  MOV     (R3)+, (R1)	;   заполняем 8 пикселей
015550  ADD     #000100, R1	;   к следующей строке
015554  SOB     R2, 015546	;   повторяем
015556  BR      015742
;
015560  JMP     020554
;
015564  CALL    020706
015570  CMP     001770, 001772
015576  BHI     015714
015600  JMP     015660
;
015604	MOV	001762, R3	; Количество чертей
015610	MOV	#000001, R1
015614	MOV	#022072, R4	; начало массива чертей 022070 + 1 слово
015620	MOV	(R4), R2	;   получаем адрес в образе лабиринта
015622	CMP	R0, R2		;   адрес тот же?
015624	BEQ	015636		;   да => выходим, минус одна жизнь
015626	ADD	#000012, R4	;   к следующей записи
015632	SOB	R3, 015620	; повторяем для всех чертей
015634	BR	015654		; проверили всех, нет коллизий
015636	CALL	017140		; Минус одна жизнь
015642	TST	001756		; количество жизней = 0 ?
015646	BEQ	015714		; да => переходим
015650	JMP	014624
015654	JMP	014664
;
015660  CLR     011306
015664  JMP     014624
015670  .WORD	177064
;
; Подпрограмма ???
015672	MOV	R0, R5
015674	MOV	001722, R0
015700	NOP	
015702	NOP	
015704	NOP	
015706	ADD	#000170, R0
015712	RETURN	
;
015714	BR	015772		; Количество жизней стало 0
;
015716	MOV	001726, R2	; берём адрес в растре
015722	CALL	005704		; рисуем спрайт R0 с возможным смещением вниз
015726	RETURN	
;
015730	MOV	001726, R2	; берём адрес в растре
015734	CALL	006006		; рисуем спрайт R0 с возможным смещением вверх
015740	RETURN	
;
015742  TST     001766
015746  BNE     015604
015750  CMP     R0, 001774
015754  BNE     015604
015756  BR      015560
; Подпрограмма ???
015760	CALL	005000		; Рисование лабиринта
015764	INC	011306
015770	RETURN
;
015772  JMP     022664
015776  NOP
; Подпрограмма ??? игровая логика
016000	CMP	001740, #011200
016006	BLE	016164
016010	MOV	#011204, R0
016014	MOV	#000010, R3
016020	DEC	(R0)
016022	ADD	#000006, R0
016026	SOB	R3, 016020
016030	TST	011204
016034	BGT	016164
016036	MOV	011202, R1
016042	MOV	#013610, R2
016046	MOV	#000012, R3
016052	MOV	(R2)+, (R1)
016054	ADD	#000100, R1
016060	SOB	R3, 016052
016062	SUB	#002400, R1
016066	MOV	R1, R5
016070	BR	016166
016072	NOP	
016074	MOV	#011206, R3
016100	MOV	(R3)+, (R2)+
016102	CMP	R3, #011300
016106	BNE	016100
016110	SUB	#000006, 001740
016116	CMPB	(R1), #000005
016122	BNE	016146
016124	JMP	016626
016130	CALL	017114
016134	BIS	(R0)+, (R5)	;   рисуем 8 пикселей поверх
016136	ADD	#000100, R5	;   к следующей строке растра
016142	SOB	R2, 016134	;   повторяем
016144	BR	016162
016146	CMP	R1, 011102
016152	BNE	016162
016154	MOV	#013704, R0
016160	BR	016226
016162	BR	016244
016164	RETURN	
016166	MOV	011200, R0
016172	MOV	R0, R1
016174	MOV	#011200, R2
016200	BR	016072
016202	RETURN
016204	CLR	001736
016210	RETURN	
; Подпрограмма ??? игровая логика
016212	MOV	#024000, R1
016216	SOB	R1, 016216	; Цикл ожидания
016220	CALL	017044
016224	RETURN
016226	SUB	#000036, 011102
016234	SUB	#001200, 011100
016242	BR	016130
016244	CALL	017030
016250	RETURN	
016252	TST	001736
016256	BNE	016272
016260	MOV	#000003, 001732
016266	JMP	007204
;
016272  JMP     014572
016276  BNE     016224
016300	TSTB	(R1)		; пустой элемент ?
016302	BNE	016310		; нет => переходим
016304	JMP	007310
;
016310	CMPB	(R1), #000006
016314	BEQ	016304
016316	CMP	001732, #000003
016324	BNE	016332
016326	JMP	007336
016332	JMP	007302
;
016336	TST	001736
016342	BEQ	016350
016344	JMP	014572
;
016350	TST	001754
016354	BEQ	016362
016356  JMP     007070
;
016362	JMP	007132		; Переход к проверке клавиатуры
;
016366	TST	R1
016370	BNE	016400
016372	CALL	006254
016376	RETURN	
016400	CALL	006336
016404	RETURN	
;
016406  TST     R3
016410  BNE     016420
016412  MOV     #000001, R3
016416  NOP     
016420  RETURN  
;
016422	INC	R0
016424	TSTB	(R0)
016426	BEQ	016444
016430	CMPB	(R0), #000006
016434	BEQ	016444
016436	CMPB	(R0), #000007
016442	BNE	016474
016444	ADD	#000036, R0
016450	TSTB	(R0)
016452	BEQ	016470
016454	MOV	#000001, R4
016460	CALL	006460
016464	TST	R5
016466	BNE	016554
016470	SUB	#000036, R0
016474	SUB	#000002, R0
016500	TSTB	(R0)
016502	BEQ	016520
016504	CMPB	(R0), #000006
016510	BEQ	016520
016512	CMPB	(R0), #000007
016516	BNE	016550
016520	ADD	#000036, R0
016524	TSTB	(R0)
016526	BEQ	016544
016530	MOV	#000003, R4
016534	CALL	006460
016540	TST	R5
016542	BNE	016554
016544	SUB	#000036, R0
016550	JMP	006404
016554	RETURN	
;
016556  CMP     011102, R0
016562  BMI     016574
016564  MOV     #000004, R3
016570  SUB     R5, R3
016572  MOV     R3, R5
016574  RETURN  
016576  ASL     @(SP)+
;
016600	MOV	#000001, 001732
016606	ADD	#000036, 001730	; переходим к следующей строке лабиринта
016614	ADD	#001200, 001726	; на 10. строк ниже
016622	JMP	015260
016626	MOV	#013660, R0
016632	MOV	#022072, R2
016636	CMP	(R2), R1
016640	BEQ	016650
016642	ADD	#000012, R2
016646	BR	016636
016650	SUB	#000036, (R2)
016654	SUB	#000002, R2
016660	SUB	#001200, (R2)	; на 10 строк растра выше
016664	ADD	#000004, R2
016670	CLR	(R2)
016672	JMP	016130
;
016676	.BLKW	6
;
016712	INC	001704
016716	TST	011304
016722	BEQ	016742
016724	CMP	R2, #000004
016730	BEQ	016740
016732	CMP	R2, #000005
016736	BNE	016742
016740	CLRB	(R1)
016742	RETURN	
;
016744	.BLKW	3
;
; Подпрограмма: ???
016752	CLR	001776		; Обнуляем количество очков
016756	INC	011304
016762	RETURN	
;
016764  TST     001766
016770  BEQ     016776
016772  JMP     015604
016776  .BLKW	1
;
; Подпрограмма: ???
017000	CALL	020316
017004	MOV	#000070, 011310
017012	RETURN	
;
017014	MOV	001726, R2	; берём адрес в растре
017020	ADD	#000003, 011310
017026	RETURN	
017030	MOVB	#000002, (R1)
017034	SUB	#000003, 011310
017042	RETURN	
; Подпрограмма ??? игровая логика
017044	CALL	016000
017050	TST	011104
017054	BNE	017100		; нет => на выход
017056	TST	011106
017062	BEQ	017100		; да => на выход
017064	TST	011110
017070	BNE	017100		; нет => на выход
017072	CALL	017226		; звук
017076	NOP	
017100	RETURN	
017102	ADD	#001200, R2
017106	CALL	017252		; звук
017112	RETURN	
017114	MOV	R5, R3
017116	CALL	020430
017122	RETURN	
017124	RETURN	
017126	DEC	001766		; сундуков стало меньше на один
017132	CALL	017322		; звук
017136	RETURN	
017140	DEC	001756		; Минус одна жизнь
017144	CALL	017360		; звук
017150	RETURN	
;
017152	ADD	#000002, R0
017156	CMP	R0, #000005
017162	BMI	017170
017164	SUB	#000004, R0
017170	JMP	015100
;
017174	NOP
017176	NOP
;
017200	MOV	R4, R5
017202	MOV	#000300, @#177716
017210	SOB	R5, 017210
017212	MOV	R4, R5
017214	MOV	#000200, @#177716
017222	SOB	R5, 017222
017224	RETURN	
;
017226	MOV	#000060, R4
017232	CALL	017200
017236	ADD	#000040, R4
017242	CMP	R4, #000200
017246	BMI	017232
017250	RETURN	
017252	MOV	#000100, R4
017256	CALL	017200
017262	ADD	#000003, R4
017266	CMP	R4, #000200
017272	BMI	017256
017274	RETURN	
017276	MOV	#001000, R4
017302	CALL	017200
017306	SUB	#000010, R4
017312	CMP	R4, #000600
017316	BPL	017302
017320	RETURN	
017322	MOV	#000400, R4
017326	MOV	#000030, R3
017332	CALL	017200
017336	SOB	R3, 017332
017340	ASR	R4
017342	MOV	#000030, R3
017346	CALL	017200
017352	SOB	R3, 017346
017354	JMP	020236
017360	MOV	#002000, R4
017364	CALL	017200
017370	SUB	#000005, R4
017374	CMP	R4, #000600
017400	BPL	017364
017402	RETURN	
;
017404	INC	001704
017410	MOV	001730, R0	; берём адрес в образе лабиринта
017414	TST	R1
017416	BEQ	017424
017420	JMP	006260
017424	INC	R0
017426	CMPB	(R0), #000001
017432	BMI	017442
017434	CMPB	(R0), #000003
017440	BMI	017470
017442	MOV	#000001, R4
017446	CALL	006460
017452	TST	001704
017456	BNE	017464
017460	MOV	R4, R3
017462	RETURN	
017464	TST	R5
017466	BNE	017462
017470	JMP	010144
;
017470  JMP     010144
017474  SUB     (R2)+, @(R2)+
017476  JMP     006260
;
017502	CALL	022770
017506	CALL	010106
017512	RETURN	
;
017514	CALL	011040
017520	CMP	011314, #000014	; СБРОС?
017526	BNE	017534
017530	JMP	010076
;
017534	MOV	#001714, R0	;
017540	JMP	015402
; Подпрограмма ???; R4 = ???
017544	MOV	001730, R5	; берём адрес в образе лабиринта
017550	CMP	R4, #000001
017554	BEQ	017564
017556	CMP	R4, #000003
017562	BNE	017660		; на выход
; R4 = 1 или 3
017564	SUB	#011410, R5	; вычитаем начальный адрес, оставляя индекс
017570	CMP	R5, #000036	;   меньше 30.? первая строка?
017574	BMI	017604		;   да => переходим
017576	SUB	#000036, R5	;   вычитаем 30. -- на строку выше
017602	BR	017570		;   повторяем
017604	SUB	#000017, R5	; вычитаем 15. -- половину строки
017610	TST	R5
017612	BMI	017632		; меньше 0 => переходим
017614	CMP	R4, #000003
017620	BEQ	017660		; на выход
017622	CMP	R5, #000015
017626	BHI	017644		; больше 13. => переходим
017630	BR	017660		; на выход
; R5 меньше нуля -- элемент в первой половине строки
017632	NEG	R5		; меняем знак числа -- теперь это 1..15
017634	CMP	R4, #000001
017640	BEQ	017660		; на выход
017642	BR	017674
017644	CLR	R5
017646  CLR     001734
017652	CLR     001736
017656	BR      017666
017660	MOV	#000001, R5	; результат -- ???
017664	RETURN	
017666	DEC     001736
017672	RETURN  
017674	DEC	R5
017676	BR	017622
017700	MOV	#000001, R4
017704	CALL	017544
017710	TST	R5
017712	BNE	017716
017714	RETURN
;
017716	CALL	005500		; Вывод игрового объекта
017722	JMP	005610		; Вывод поверх следующего элемента
017726	MOV	#000003, R4
017732	CALL	017544
017736	TST	R5
017740	BNE	017744		; R5 не 0 => переходим
017742	RETURN	
;
017744	CALL	005500		; Вывод игрового объекта
017750	JMP	005652		; Вывод поверх предыдущего элемента
;
017754	.BLKW	1
;
017756  CALL    020732		; ??? тут какой-то бред, видимо данные или мусор
017762  MTPS    #000340
017766  JMP     021406
017772  BMI     017764
017774  JMP     021406
;
; Подпрограмма: вывод 5-значного числа R4
020000	MOV	#000060, R0
020004	SUB	#023420, R4	; 10000.
020010	BMI	020016
020012  INC     R0
020014  BR      020004
020016	ADD	#023420, R4
020022	EMT	000016		; драйвер ТВ-монитора
020024	MOV	#000060, R0
020030	SUB	#001750, R4	; 1000.
020034	BMI	020042
020036  INC     R0
020040  BR      020030
020042	ADD	#001750, R4	; готова цифра тысяч
020046	EMT	000016		; драйвер ТВ-монитора
; Вход: вывести 3-значное число R4
020050	MOV	#000060, R0
020054	SUB	#000144, R4	; 100.
020060	BMI	020066
020062  INC     R0
020064  BR      020054
020066	ADD	#000144, R4	; Готова цифра сотен
020072	EMT	000016		; драйвер ТВ-монитора
; Вход: вывести двузначное число R4
020074	MOV	#000060, R0
020100	SUB	#000012, R4
020104	BMI	020112
020106	INC	R0
020110	BR	020100
020112	ADD	#000012, R4	; готова цифра десятков
020116	EMT	000016		; драйвер ТВ-монитора
020120	MOV	#000060, R0
020124	ADD	R4, R0		; готова последняя цифра
020126	EMT	000016		; драйвер ТВ-монитора
020130	RETURN
;
020132	.STR	" SCORE       LIVES     LEVEL   "
;
; Подпрограмма: вывод статусной строки	
020172	CLR	R1
020174	MOV	#000026, R2
020200	EMT	000024		; установка курсора (0,22)
020202	MOV	#020132, R1	; адрес строки
020206	MOV	#000040, R2
020212	EMT	000020		; вывод строки символов
020214	MOV	#000035, R1
020220	MOV	#000026, R2
020224	EMT	000024		; установка курсора (29,22)
020226	MOV	001770, R4	; берём номер уровня
020232	CALL	020074		; вывести номер уровня
020236	MOV	#000007, R1
020242	MOV	#000026, R2
020246	EMT	000024		; установка курсора (7,22)
020250	MOV	001776, R4	; получаем текущее количество очков
020254	CALL	020000		; Вывести 5-значное число R4
020260	MOV	#000023, R1
020264	MOV	#000026, R2
020270	EMT	000024		; установка курсора (19,26)
020272	MOV	001756, R4	; берём количество жизней
020276	JMP	020050		; выводим 3-значное число и возвращаемся
;
020302	TST	001776		; количество очков нулевое?
020306	BEQ	020314
020310	DEC	001776
020314	RETURN	
;
020316	CLR	001702		; Очищаем количество человеков
020322	MOV	#000232, R0
020326	EMT	000016		; драйвер ТВ-монитора
020330	RETURN	
;
020332  MOV     #000100, R4
020336  MOV     #000100, R3
020342  CALL    017200
020346  SOB     R3, 020342
020350  ADD     #000200, R4
020354  CMP     R4, #001000
020360  BMI     020336
020362  BR      020310
; Подпрограмма: ???
020364	CALL	017000
020370	CLR	011302
020374	RETURN	
; Подпрограмма ??? R2 = адес в растре, R3 = адрес в образе лабиринта
020376	TST	001736		; равен нулю?
020402	BEQ	020422		; да => выводим как есть, иначе на 5 строк выше
020404	SUB	#000500, R2	; минус 5 строк растра
020410	CALL	005500		; Вывод игрового объекта
020414	ADD	#000500, R2	; плюс 5 строк растра
020420	BR	020426
020422	CALL	005500		; Вывод игрового объекта
020426	RETURN	
;
020430	CALL	017276
020434	MOV	#000012, R2	; 10. раз
020440	MOV	R3, R5
020442	RETURN	
;
020444	MOV	#000013, R1
020450	MOV	#000027, R2
020454	EMT	000024
020456	MOV	#020616, R1
020462	MOV	#000011, R2
020466	EMT	000020
020470	JMP	020766
;
020474  CMP     R2, #000011
020500  BNE     020506
020502  JMP     003374
020506  MOV     #000001, 001756
020514  MOV     001700, 001770
020522  MOV     #000001, 011312
020530  CALL    023070
020534  JMP     020572
;
; Подпрограмма: ???
020540	MOV	#000001, 001770	; Номер лабиринта = 1
020546	CLR	011312
020552	RETURN
;
020554
	
020630	CMP	001776, 011316
020636	BLE	020444
020732	TST	177662
020736	JMP	011112
020744	TST	(R2)
020746	BEQ	020760
020750	MOV	#024000, R0
020754	SOB	R0, 020754
020756	BR	020736
020760	CLR	R0
020762	SOB	R0, 020762
020764	RETURN	
020766	MOV	#021162, R2
020772	CALL	020732
020776	NOP	
021000	RETURN	

021264	CLR	R1
021266	CLR	R2
021270	EMT	000024		; Установка курсора в (0,0)
021272	MOV	#043200, R0	; экран, начало 26. строки
021276	CLR	(R0)+		;   очищаем 8 пикселей
021300	CMP	R0, #075000	;   экран, начало 232. строки
021304	BMI	021276		;   повторяем
021306	RETURN
;
; Прерывание по клавише СТОП или зависанию (вектор 4)
; также сюда приходим после завершения игры
021310	MOV	#001000, SP	; Инициализация стека
021314	NOP	
021316	NOP	
021320	NOP	
021322	MOV	#000040, R1	; По адресу 000040
021326	MOV	#000120, R2	; 80. слов, 160. байт
021332	CLR	(R1)+		;   очищаем слово
021334	SOB	R2, 021332	;   повторяем
021336	CALL	022720
021342	BR	021350
;
021350	TRAP	000000		; вывод строки
021352	.WORD	010000, 000006	; 
021356	MOV	#021630, 000274
021364	JMP	001064		; Переход к формированию экрана меню

021636	JMP	022046

021642	TSTB	177660		; проверка нажатия клавиши
021646	BPL	021642		; не нажата => ждём дальше
021650	MOV	177662, R0
021654	SUB	#000060, R0
021660	BMI	021676
021676	RETURN	

; Обработчик прерывания TRAP (вектор 34)
021730	MOV	R5, -(SP)
021732	MOV	R0, -(SP)
021734	MOV	000004(SP), R5	; Сохранённый CPC
021740	MOV	-(R5), R0	; Получаем команду вызвавшую TRAP
021742	MOVB	R0, R0		; Код TRAP = 0 ?
021744	BEQ	021760		; да => переходим
021746	CALL	102234		; вызов EMT 16 - вывод символа из мл байта R0
021752	MOV	(SP)+, R0
021754	MOV	(SP)+, R5
021756	RTI			; возврат из прерывания
; TRAP 000000
021760	MOV	R1, -(SP)
021762	MOV	R2, -(SP)
021764	TST	(R5)+		; пропускаем саму команду
021766	MOV	(R5)+, R1	; адрес строки символов
021770	MOV	(R5)+, R2	; длина мл байт, символ огр ст байт
021772	MOV	R5, 000010(SP)	; после этих двух слов место откуда продолжать
021776	CALL	107050		; EMT 20 - вывод строки символов
022002	MOV	(SP)+, R2
022004	MOV	(SP)+, R1
022006	BR	021752		; завершаем обработку TRAP
; Установка курсора по координатам
022010	MOV	R5, -(SP)
022012	MOV	R1, -(SP)
022014	MOV	R2, -(SP)
022016	MOV	000006(SP), R5
022022	MOVB	(R5)+, R1
022024	MOVB	(R5)+, R2
022026	MOV	R5, 000006(SP)
022032	CALL	107272
022036	MOV	(SP)+, R2
022040	MOV	(SP)+, R1
022042	MOV	(SP)+, R5
022044	RTI			; возврат из прерывания
;
022046	TST	@#177662
022052	TST	001754
022056	BNE	022064
022060	JMP	021642

; ??? данные -- игровые объекты
022070

022664	BR	023032

022714	JMP	020630

022720	COMB	@#000053
022724	COM	@#000220
022730	MOV	#021310, 000004	; задаём адрес вектора 4
022736	CALL	100206
022742	MOV	#177777, 177714	; в выходной регистр порта
022750	RETURN	

; Цикл ожидания -- здесь крутимся после вывода картинки уровня
021642	TSTB	177660		; Нажали клавишу?
021646	BPL	021642		; если нет то ждём дальше
021650	MOV	177662, R0	; код нажатой клавиши
021654	SUB	#000060, R0
021660	BMI	021676

021676	RETURN	

; ??? Что-то с клавиатурой
022046	TST	@#177662
022052	TST	001754
022056	BNE	022064
022060	JMP	021642		; Переходим к ожиданию нажатия клавиши
022064

022770	TST	001754
022774	BNE	023004
022776	MOV	177662, R0
023002	RETURN	

023032	TST	001756
023036	BEQ	022714

023052	CLR	001736
023056	CMPB	(R1), #000006
023062	BEQ	023066
023064	CLRB	(R1)
023066	RETURN	

023150	MOV	#000045, R5
023154	CALL	023224
023160	CMP	R3, #000003	; R3 >= 3 ?
023164	BPL	023176
023166	MOV	R4, R3
023170	MOV	#000001, R5
023174	RETURN	
;
023176	CLR	R5
023200	RETURN	
;
023202	MOV	#000045, R5
023206	CALL	023224
023212	CMP	R3, #000003	; R3 < 3 ?
023216	BMI	023176
023220	BR	023166
;
023224	MOV	023222, R3
023230	MOV	#000011, R2
023234	ASL	R3
023236	SOB	R2, 023234
023240	MOV	#000005, R2
023244	SUB	023222, R3
023250	SOB	R2, 023244
023252	MOV	#000017, R2
023256	XOR	R2, R3
023260	MOV	R3, 023222
023264	BIC	#100000, R3
023270	CMP	R3, R5
023272	BLE	023312
023274	ASL	R5
023276	CMP	R3, R5
023300	BLE	023306
023302	ASR	R3
023304	BR	023276
023306	ASR	R5
023310	SUB	R5, R3
023312	RETURN	

; Массив игровых объектов, следующий свободный адрес указан в 001720
024000


; Отсюда начинается определение лабиринтов, по 240. байт на каждый -- 6 слов на строку, 20 строк
024220	.WORD	000000 000073 033333 033333 070000 000000
		022222 022270 020000 000007 070060 020070
		000000 000070 022222 022227 011111 021172
		062007 000070 002226 022007 000000 000070
		...
024600	.WORD	; Второй уровень
025160
025540
026120
026500
...
; С адреса 024220 по 040000 входит 25. уровней, всего 6000. байт на все уровни

