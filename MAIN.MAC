	.TITLE	LODERUN
	.MCALL	.EXIT,.PRINT,.TTYOUT,.TTYIN

START:
	BIS     #010000, @#44	; Disable Ctrl-C

	CALL	Z14600		; Выбор пункта ИГРА в меню

DONE:
	.TTYIN

	.EXIT

TITLE:
	.ASCII	<033>/%!0/<033>/LI@@7@@0@@0/<033>/%!3/
	.BYTE	14		; Clear screen
	.ASCIZ	/LODE RUNNER v0.00/

	.BLKW	304		; ADDRESS ALIGNMENT GAP
X01700::
;
; Variables
;
Z01700:	.WORD	0		;
Z01702:	.WORD	0		; Количество людей??? очищается, инкрементируется
Z01704:	.WORD	0		; Адрес в образе лабиринта, инициализируется 011410
Z01706:	.WORD	0		; Адрес текущего слова для текущего лабиринта
Z01710:	.WORD	0		; Номер лабиринта; инициализируется из 001770
Z01712:	.WORD	0		; Счетчик строк при рисовании лабиринта: инициализируется 20., декрементируется
Z01714:	.WORD	0		; Адрес начала текущего лабиринта -- определения в виде триплетов; инициализируется 023640 + 240. * N
Z01716:	.WORD	0		; ??? адрес куда пишем по 5 слов, инициализируется 022070, для элемента 4 -- чертей
Z01720:	.WORD	0		; Адрес в растре: инициализируется 043202, добавляется по 640.
				;   в игровой логике: инициализируется 024000, сравнивается с 024000
Z01722:	.WORD	0		; ??? инициализируется 012600, 013160, 
Z01724:	.WORD	0		; ??? инициализируется 013660, 013704
; Запись об игровом объекте, из 5-ти слов, копируется из 011100
Z01726:	.WORD	0		; Адрес в растре
Z01730:	.WORD	0		; Адрес в образе лабиринта
Z01732:	.WORD	0		; ??? 0/1/2/3; 2 -- падаем
Z01734:	.WORD	0		; ??? 0/1/2/3/4
Z01736:	.WORD	0		; Смещение по высоте ??? если не 0 то спрайт выводится выше на 5 строк
Z01740:	.WORD	0		; ??? сравнивается с 011200
        .BLKW	4
Z01754:	.WORD	0		; ??? проверяется на 0
Z01756:	.WORD	0		; Количество жизней: инициализируется 10., декрементируется
Z01760:	.WORD	0		; ??? инициализируется 1, очищается, инкрементируется
Z01762:	.WORD	0		; Количество чертей; не больше 20.
Z01764:	.WORD	0		; ???
Z01766:	.WORD	0		; Количество сундуков осталось
Z01770:	.WORD	0		; Номер текущего уровня
Z01772:	.WORD	0
Z01774:	.WORD	0		; ??? инициализируется 011410 + байтовое значение, зависит от лабиринта
Z01776:	.WORD	0		; Текущее количество очков


	.BLKW	1015		; ADDRESS ALIGNMENT GAP
; Подпрограмма подготовки экрана: очистка, рисование рамки
Z04030::
	.PRINT	#TITLE		; Show title/version message
; Pause to let PPU finish the previous commands
;TODO: Нужно найти другой способ очистки, без ожидания
	MOV	#177777, R5
ST0:	NOP
	SOB	R5, ST0
; Рисование прямоугольной рамки игрового поля
; Draw the game field frame -- box (80.,44.)-(560.,245.)
; Draw left/right lines
Z04036:	MOV	#103344, R1	; 100000 + 44.*50 + 40./8 - 1
	MOV	#103403, R2	; R1 + 240./8 + 1
	MOV	#202., R5	; Number of lines
1$:	MOV	R1, @#176640
	MOV	#100200, @#176642	; Left part
	ADD	#80., R1	; Next line
	MOV	R2, @#176640
	MOV	#0401, @#176642	; Right part
	ADD	#80., R2	; Next line
	SOB	R5, 1$
; Draw top/bottom lines
	MOV	#103345, R1
	MOV	#142665, R2	; R1 + 80.*201
	MOV	#30., R5	; 240./8
2$:	MOV	R1, @#176640
	MOV	#177777, @#176642
	INC	R1
	MOV	R2, @#176640
	MOV	#177777, @#176642
	INC	R2
	SOB	R5, 2$
Z04156:	RETURN


	.BLKW	304		; ADDRESS ALIGNMENT GAP
Z05000::
	NOP	
	CLR	Z01702		; Очищаем количество людей???
	CLR	Z01762		; Очищаем количество чертей
	CLR	Z01766		; Очищаем количество сундуков
	MOV	#Z22070, 001716	; Начало массива чертей
	MOV	#LEVELS-240., R1
	MOV	Z01710, R0	; Номер лабиринта
Z05034:	ADD	#000360, R1	; 240. байт занимает один лабиринт
	SOB	R0, Z05034	; повторяем пока не найдём нужный лабиринт
	MOV	R1, Z01714	; Сохраняем адрес начала текущего лабиринта
	MOV	#Z11410, Z01704	; Адрес начала образа лабиринта
	MOV	R1, Z01706	; Сохраняем адрес текущего лабиринта
	MOV	#103465, Z01720	; начальное значение (потом будем добавлять по 800.)
	MOV	#000024, Z01712	; 20. строк
; Цикл по строкам
Z05074:	MOV	Z01720, R3
	MOV	#6, R5		; 6 слов по 5 триплетов = 30 элементов в строке
; Цикл по R5 -- по словам
Z05104:	MOV	Z01706, R1	; Получаем адрес откуда читаем лабиринт
	MOV	(R1), R0	; Читаем очередное слово
	MOV	#5, R4		; 5 -- количество триплетов в слове
; Цикл по R4 -- по триплетам в слове
Z05116:	MOV	R0, R2
	BIC	#107777, R2	; оставить только биты 12-14 -- верхний триплет
	MOV	#000014, R1	; 12. раз
Z05130:	ROR	R2		; повторить битовый сдвиг вправо
	SOB	R1, Z05130	; в итоге оставленные биты передвинуты в 0-2 биты
; Дальше рисуем элемент для прочитанного триплета
	MOV	Z01704, R1	; Получаем адрес в образе лабиринта
	CMP	R2, #6		; R2 = 6 ? сундук?
	BNE	Z05160		; нет => переходим
; R2 = 6 -- сундук
	BR	Z05456
;
Z05154:	INC	Z01766		; количество сундуков
Z05160:	MOVB	R2, (R1)
	CMP	R2, #000004	; R2 = 4 ? это чёрт?
	BNE	Z05240		; Нет => переходим
; R2 = 4 -- чёрт
	CMP	Z01762, #000024	; чертей меньше 20. ?
	BMI	Z05210		; да => переходим
; Сохраняем чёртика
Z05210:	INC	Z01762		; чертей на один больше
	MOV	Z01716, R2	; Адрес 5-словной записи объекта
	MOV	R3, (R2)+	; сохраняем адрес в растре
	MOV	R1, (R2)+	; сохраняем адрес в образе лабиринта
	CLR	(R2)+
	CLR	(R2)+
	CLR	(R2)+
	MOV	R2, Z01716	; Сохраняем новый адрес
	BR	Z05422
; R2 != 4
Z05240:	BR	Z05430
; Создаём человечка: подготовка объекта из 5-ти слов по 011100
Z05242:	MOV	#Z11100, R2	; Адрес игровой записи
	MOV	R3, (R2)+	; Адрес в растре
	MOV	R1, (R2)+	; Адрес в образе лабиринта
	CLR	(R2)+
	CLR	(R2)+
	CLR	(R2)+
	MOV	#000005, R2	; 5 -- человечек
	MOVB	R2, (R1)	; пишем в образ лабиринта
	NOP	
; Переходим к следующему триплету
Z05270:	CLC			; Сдвигаем на три разряда влево
	ROL	R0              ; <
	ROL	R0              ; <
	ROL	R0              ; <
	CALL	Z16712
; Получаем адрес спрайта по индексу R2
Z05304:	MOV	#Z13540, R1	; Начало таблицы спрайтов
	TST	R2		
	BEQ	Z05322
Z05314:	ADD	#000024, R1	; Переход к следующему спрайту
	SOB	R2, Z05314
; Приступаем к рисованию спрайта; R1 = адрес спрайта в 10 слов -- 8x10 цветных пикселей
Z05322:	MOV	#000012, R2	; Повторить для 10. строк
Z05326:	MOV	R3, @#176640
	MOV	(R1)+, @#176642	; записываем 8 цветных пикселей в растр
	ADD	#80., R3	; плюс 80. -- переход к следующей строке растра
	SOB	R2, Z05326	; продолжаем цикл по строкам
	SUB	#799., R3	; минус 799. -- возвращаемся на 10. строк назад, плюс 8 цветных пикселей вперёд
	DEC	R4		; Уменьшаем счётчик триплетов
	BNE	Z05116		; Если не последний триплет, то переходим
	ADD	#000002, Z01706	; инкремент адреса откуда читаем -- к следующему слову
	DEC	R5		; цикл по словам
	BNE	Z05104		; переход если не закончили
; Закончили рисовать строку лабиринта
Z05360:	ADD	#800., Z01720	; добавляем 800.
	DEC	Z01712		; Продолжаем цикл по строкам
	BNE	Z05074		;   по значению (001712)
; Закончили рисовать лабиринт -- дальше какая-то подготовка адреса
Z05374:	MOV	Z01710, R2	; Берём номер лабиринта
	NOP	
	ADD	#Z11000, R2	; Добавляем адрес 011000
	MOVB	(R2), R3	; и получаем оттуда байт
	ADD	#Z11410, R3	; Добавляем адрес начала образа лабиринта
	MOV	R3, Z01774	; и сохраняем -- адрес выхода в лабиринте
	RETURN	
;
Z05422:	MOV	#000004, R2
	BR	Z05270		; Переходим к следующему триплету, спрайт и продолжаем
; R2 != 4
Z05430:	CMP	R2, #000005
	BNE	Z05270		; Переходим к следующему триплету, спрайт и продолжаем
; R2 = 5 -- человек
Z05436:	TST	Z01702		; Количество человеков нулевое?
	BEQ	Z05450		; да => переходим
;
Z05450:	INC	Z01702		; теперь есть один человек
	BR	Z05242		; Создаём человечка
; R2 = 6 -- сундук
Z05456:	TST	Z11306
	BEQ	Z05154

;TODO

Z11000:	.BLKW	40		;TODO: Уточнить, неясно сколько нужно

Z11100:	.BLKW	40		;TODO: Уточнить, неясно сколько нужно

Z11302:	.WORD	0		; ??? очищается, инкрементируется, сравнивается с 10.
Z11304:	.WORD	0		; ??? очищается, инкрементируется
Z11306:	.WORD	0		; ??? очищается, инкрементируется
Z11310:	.WORD	0		; ???
Z11312:	.WORD	0		; ???

; Образ текущего лабиринта, байт на элемент, 30. байт на строку, 600 байт всего
Z11410::
	.BLKB	600.

SPRITE:
Z13540:
	.WORD	000000,000000,000000,000000,000000,000000,000000,000000,000000,000000
	.WORD	177400,177400,177400,177400,177400,177400,177400,177400,177400,177400
	.WORD	175773,175773,175773,175773,000000,157737,157737,157737,157737,000000
	.WORD	177777,000000,000000,000000,000000,000000,000000,000000,000000,000000
	.WORD	006014,026455,024445,037477,017036,017036,006014,011022,011022,011022
	.WORD	006014,026455,024445,017036,006014,006014,010002,011022,011022,031463
	.WORD	000000,006014,015022,032441,032445,037477,037477,037477,037477,000000
	.WORD	020441,020441,037477,020441,020441,020441,020441,037477,020441,020441


; Подпрограмма: вызывается по выбору пункта ИГРА в меню
Z14600:	MOV	#000012, Z01756	; 10. -- начальное количество жизней
	CALL	Z20540		; Сбрасываем Номер лабиринта в 1
	NOP	
	CALL	Z20364
	CALL	Z16752
; Вход: после очередной смерти человечка
Z14624:	MOV	Z01770, Z01710	; Номер лабиринта
	CALL	Z04030		; очистка экрана и рисование рамки игрового поля
	CALL	Z15760		; Отрисовать лабиринт
;TODO	CALL	Z21636		; ??? Переход к ожиданию перед игрой
;TODO
	RETURN		;STUB


; Подпрограмма ???
Z15760:	CALL	Z05000		; Рисование лабиринта
	INC	Z11306
	RETURN


Z16712:	INC	Z01704
	TST	Z11304
	BEQ	Z16742
	CMP	R2, #000004
	BEQ	Z16740
	CMP	R2, #000005
	BNE	Z16742
Z16740:	CLRB	(R1)
Z16742:	RETURN	


; Подпрограмма: ???
Z16752:	CLR	Z01776		; Обнуляем количество очков
	INC	Z11304
	RETURN	

; Подпрограмма: ???
Z17000:	CALL	Z20316
	MOV	#000070, Z11310
	RETURN	

;
Z20316:	CLR	001702		; Очищаем количество человеков
	MOV	#000232, R0	; ???
;	EMT	000016		; драйвер ТВ-монитора
Z20330:	RETURN	

; Подпрограмма: ???
Z20364:	CALL	Z17000
	CLR	Z11302
	RETURN	

; Подпрограмма: ???
Z20540:	MOV	#000001, Z01770	; Номер лабиринта = 1
	CLR	Z11312
	RETURN


Z21636:	JMP	Z22046

Z21642:	TSTB	177660 ;TODO	; проверка нажатия клавиши
	BPL	Z21642		; не нажата => ждём дальше
	MOV	177662, R0 	;TODO
	SUB	#000060, R0
Z21660:	BMI	Z21676
Z21676:	RETURN	


;
Z22046:	TST	@#177662	;TODO
	TST	Z01754
	BNE	Z22064
Z22060:	JMP	Z21642
Z22064:				;TODO

Z22070:	.BLKW	10		;TODO: Уточнить, неясно сколько нужно

.END	START
