	.TITLE	LODERU
	.MCALL	.EXIT,.TTYIN,.TTINR

START:
	BIS     #010000, @#44	; Disable Ctrl-C

	CALL	Z01064

	MOV	#EXITSC, R1	; Строка очистки экрана перед выходом
	CALL	PRINT
	.EXIT

Z01060:
; Формирование экрана главного меню
Z01064:
	CLR	Z11306
	CLR	Z11304
	MOV	#1, MENUP	; Начальный пункт меню

MENUDR:	; Рисуем экран меню
	MOV	#MENUSC, R1	; Строка главного меню
	CALL	PRINT
	CALL	PAUSE		; Пауза чтобы можно было дальше рисовать
	CALL	HLINES		; Нарисовать горизонтальные линии
	MOV	#MENUS2, R1	; начало строк меню
	MOV	#44, R2		; верхняя строка меню
	MOV	#4, R5		; количество пунктов меню
10$:	; Цикл рисования пунктов меню
	MOV	#33, R0		; Esc
	CALL	TTYOUT
	MOV	#131, R0	; Курсор в позицию
	CALL	TTYOUT
	MOV	R2, R0		; строка
	CALL	TTYOUT
	MOV	#51, R0		; колонка
	CALL	TTYOUT
	CALL	PRINT
	INC	R2
	SOB	R5, 10$		; повторяем

	CALL	SPRSDR		; Нарисовать спрайты
; Помещаем курсор к текущему пункту меню
	MOV	#33, R0		; Esc
	CALL	TTYOUT
	MOV	#131, R0	; Курсор в позицию
	CALL	TTYOUT
	MOV	MENUP, R0
	ADD	#43, R0		; строка
	CALL	TTYOUT
	MOV	#47, R0		; колонка
	CALL	TTYOUT

Z01404:
	CALL	WTKEY		; Ожидание нажатия клавиши
; Сюда приходим после нажатия клавиши в меню
Z01406:	MOV	MENUP, R2	; Текущий пункт меню
	CMPB	R0, #15		; Enter?
	BEQ	Z01430
	CMPB	R0, #40		; Пробел?
	BEQ	Z01430		; Да => переходим
	CMP	R0, #000012
	BNE	Z01504
; Выбран пункт меню
Z01430:	CMP	R2, #1		; Пункт 1 GAME ?
	BNE	Z01446		; Нет => переходим
	CALL	Z14600		; ИГРА
	BR      Z01060
Z01446:
	CMP	R2, #3		; Пункт 3 COLOR ?
	BNE	2$		; нет => переходим
	MOV	COLOR, R0
	INCB	R0
	MOV	R0, COLOR
	BIC	#177775, R0
	ROR	R0
	ADD	#60, R0
	MOVB	R0, @#<MENUSC + 10>
	MOVB	R0, @#<MENUSC + 13>
	CALL	SPSWAP		; Поменять цвета всех спрайтов
	CALL	SPRSDR		; Нарисовать спрайты
	BR	MENUDR		; Перерисовать меню
2$:
	CMP	R2, #4		; Пункт 4 EXIT ?
	BNE	Z01404		; нет => переходим
	RETURN			; Выход, завершение работы

Z01504:	CMP	R0, #15501	; Стрелка вверх?
	BNE	Z01530
	CMP	R2, #2		; текущий пункт < 2 ?
	BMI	Z01404
	MOV	#34, R0		; вверх
	CALL	TTYOUT
	DEC	MENUP
	BR	Z01404
Z01530:	CMP	R0, #15502	; Стрелка вниз?
	BNE	Z01404
	CMP	R2, #4		; текущий пункт >= 4 ?
	BPL	Z01404
	MOV	#35, R0		; вниз
	CALL	TTYOUT
	INC	MENUP
Z01552:	BR	Z01404

; Подпрограмма: показ спрайтов чтобы оценить цветовую схему
SPRSDR:
	MOV	#SPRDAT, R4	; Начало массива элементов для рисования примера
	MOV	#115367, R3	; адрес на экране
	MOV	#30., R5
10$:	CLR	R2
	MOVB	(R4)+, R2	; берём элемент
	MOV	#Z13540, R1	; Начало таблицы спрайтов
	TST	R2		
	BEQ	30$
20$:	ADD	#20., R1	; Переход к следующему спрайту
	SOB	R2, 20$
30$:	; Получили адрес спрайта в R1
	MOV	#10., R2
40$:	MOV	R3, @#176640
	MOV	(R1)+, @#176642
	ADD	#80., R3	; next line
	SOB	R2, 40$
	SUB	#799., R3	; минус 10. строк, плюс 8 пикселей вправо
	BIT	#7, R5		; строка из 8-ми элементов закончилась?
	BNE	50$		; нет => переходим
	ADD	#<800.-8.>, R3	; переходим к следующей строке
50$:	SOB	R5, 10$		; продолжаем цикл
	RETURN
SPRDAT:	.BYTE	  3,3,3,7,0,5,0
	.BYTE	0,0,0,0,7,2,2,2
	.BYTE	6,0,4,0,7,6,0,0
	.BYTE	2,2,2,2,7,1,1

	.BLKW	43		; ADDRESS ALIGNMENT GAP
;
; Блок переменных
;
Z01700::
	.WORD	10		;
Z01702:	.WORD	0		; Количество людей??? очищается, инкрементируется
Z01704:	.WORD	0		; Адрес в образе лабиринта, инициализируется 011410
Z01706:	.WORD	0		; Адрес текущего слова для текущего лабиринта
Z01710:	.WORD	1		; Номер лабиринта; инициализируется из 001770
Z01712:	.WORD	0		; Счетчик строк при рисовании лабиринта: инициализируется 20., декрементируется
Z01714:	.WORD	0		; Адрес начала текущего лабиринта -- определения в виде триплетов; инициализируется 023640 + 240. * (N - 1)
Z01716:	.WORD	0		; ??? адрес куда пишем по 5 слов, инициализируется 022070, для элемента 4 -- чертей
Z01720:	.WORD	0		; Адрес в растре: инициализируется 043202, добавляется по 640.
				;   в игровой логике: инициализируется 024000, сравнивается с 024000
Z01722:	.WORD	0		; ??? инициализируется 012600, 013160, 
Z01724:	.WORD	0		; ??? инициализируется 013660, 013704
; Запись текущего игрового объекта, из 5-ти слов, копируется из 011100
Z01726:	.WORD	0		; Адрес в растре
Z01730:	.WORD	0		; Адрес в образе лабиринта
Z01732:	.WORD	1		; Направление движения??? 0/1/2/3; 2 -- падаем
Z01734:	.WORD	1		; Фаза состояния??? 0/1/2/3/4
Z01736:	.WORD	0		; Смещение по высоте ??? если не 0 то спрайт выводится выше на 5 строк
;
Z01740:	.WORD	0		; ??? сравнивается с 011200
Z01742:	.WORD	103		; код клавиши "вправо"
Z01744:	.WORD	104		; код клавиши "влево"
Z01746:	.WORD	101		; код клавиши "вверх"
Z01750:	.WORD	102		; код клавиши "вниз"
Z01752:	.WORD	40		; код клавиши "вырыть яму"
Z01754:	.WORD	0		; ??? проверяется на 0
Z01756:	.WORD	0		; Количество жизней: инициализируется 10., декрементируется
Z01760:	.WORD	0		; ??? инициализируется 1, очищается, инкрементируется
Z01762:	.WORD	0		; Количество чертей; не больше 20.
Z01764:	.WORD	0		; ???
Z01766:	.WORD	0		; Количество сундуков осталось; когда доходит до 0 появляется выход
Z01770:	.WORD	1		; Номер текущего уровня
Z01772:	.WORD	31		; 25. -- всего уровней
Z01774:	.WORD	0		; 011410 + байтовое значение -- адрес в образе лабиринта где будет выход
Z01776:	.WORD	0		; Текущее количество очков

MENUP:	.WORD	1		; Текущий пункт меню
COLOR:	.WORD	0		; Текущая цветовая схема

MENUSC:	; Строка подготовки экрана меню
	.BYTE	33,246,62	; Формат экрана 40x24
	.BYTE	33,240,67	; Цвет символа
	.BYTE	33,241,60	; Цвет знакоместа 0
	.BYTE	33,242,60	; Цвет фона 0
	.BYTE	14		; Clear screen
	.BYTE	33,131,40,51	; Курсор в позицию
	.ASCII	/L O D E    R U N N E R/<25><25>
	.BYTE	33,131,61,41	; Курсор в позицию
	.ASCII	/BK version      Markov A (Action corp)/<25>
	.ASCII	/  UKNC port 2015 Nikita Zimin/<25>
	.BYTE	33,240,63	; Цвет символа
	.BYTE	0
MENUS2:
	.ASCIZ	/1 GAME/
	.ASCIZ	/2 LEVEL/
	.ASCIZ	/3 COLOR/
	.ASCIZ	/4 EXIT/
	.EVEN

EXITSC:	; Строка очистки экрана перед выходом
	.BYTE	33,246,061	; Формат экрана 80x24
	.BYTE	33,240,67	; Цвет символа
	.BYTE	33,241,61	; Цвет знакоместа 1
	.BYTE	33,242,61	; Цвет фона 1
	.BYTE	14		; Очистить экран
	.ASCII	/BYE!/
	.BYTE	0
	.EVEN

; Подпрограмма: Ожидание символа с клавиатуры: R0 = полученный символ
WTKEY:	.TTYIN			; символ в R0
	CMPB	R0, #33
	BNE	2$
	.TTYIN
	BIS	#15400,R0	; #33 в верхний байт
2$:	RETURN

; Подпрограмма: Вывод символа на экран: R0 = символ
TTYOUT:	TSTB	@#177564	; Источник канала 0 готов?
	BPL	TTYOUT		; нет => ждём
	MOVB	R0, @#177566	; передаём символ в канал 0
	RETURN

; Подпрограмма: Печать строки: R1 = адрес строки, строка завершается 0; портит R0
PRINT:
PR0:	MOVB	(R1)+, R0	; Конец строки?
	BEQ	PR2		; да => завершаем
PR1:	TSTB	@#177564	; Источник канала 0 готов?
	BPL	PR1		; нет => ждём
	MOV	R0, @#177566	; передаём символ в канал 0
	BR	PR0
PR2:	RETURN

;Подпрограмма: пауза после очистки экрана чтобы ПП закончил работу
PAUSE:	; Pause to let PPU finish the previous commands
	MOV	#177777, R5
PAUSE0:	NOP
	SOB	R5, PAUSE0
	RETURN

; Подпрограмма: поменять местами верхний/нижний байты во всех спрайтах -- смена цветов
SPSWAP:	MOV	#SPRITE, R0
	MOV	#<<SPREND - SPRITE> / 2>, R5
1$:	SWAB	(R0)+
	SOB	R5, 1$
	RETURN

GAMESC:	; Строка подготовки игрового экрана
	.BYTE	33,246,62	; Формат экрана 40x24
	.BYTE	14		; Clear screen
	.BYTE	33,131,40,51	; Курсор в позицию
	.BYTE	33,240,67	; Цвет символа
	.ASCII	/L O D E    R U N N E R/<25><25>
	.BYTE	33,131,66,45	; Курсор в позицию
	.ASCII	/SCORE       LIVES     LEVEL /
	.BYTE	33,240,64	; Цвет символа
	.BYTE	0
GAMES2:	.BYTE	33,131,66,67,0	; Курсор в место где жизни
	.EVEN

	.BLKW	554		; ADDRESS ALIGNMENT GAP
; Подпрограмма подготовки экрана: очистка, рисование рамки
Z04030::
	MOV	#GAMESC, R1	; Строка для подготовки игрового экрана
	CALL	PRINT
	MOV	Z01770, R4	; берём номер текущего уровня
	CALL	Z20074		; вывести номер уровня -- двузначное число
	MOV	#GAMES2, R1	; Курсор к месту где жизни
	CALL	PRINT
	MOV	Z01756, R4	; берём количество жизней
	CALL	Z20050		; выводим 3-значное число
	CALL	PAUSE		; Перед рисованием рамки нужно чтобы завершились предыдущие команды
; Рисование прямоугольной рамки игрового поля (80.,44.)-(560.,245.)
Z04036:
; Draw left/right lines
	MOV	#103344, R1	; 100000 + 44.*50 + 40./8 - 1
	MOV	#103403, R2	; R1 + 240./8 + 1
	MOV	#202., R5	; Number of lines
1$:	MOV	R1, @#176640
	MOV	#100000, @#176642	; Left part
	ADD	#80., R1	; Next line
	MOV	R2, @#176640
	MOV	#0400, @#176642	; Right part
	ADD	#80., R2	; Next line
	SOB	R5, 1$
HLINES:
; Draw top/bottom lines
	MOV	#103345, R1
	MOV	#142665, R2	; R1 + 80.*201
	MOV	#30., R5	; 240./8
2$:	MOV	R1, @#176640
	MOV	#177400, @#176642
	INC	R1
	MOV	R2, @#176640
	MOV	#177400, @#176642
	INC	R2
	SOB	R5, 2$
Z04156:	RETURN

	.BLKW	271		; ADDRESS ALIGNMENT GAP
Z05000::
;	NOP	
	CLR	Z01702		; Очищаем количество людей???
	CLR	Z01762		; Очищаем количество чертей
	CLR	Z01766		; Очищаем количество сундуков
	MOV	#Z22070, 001716	; Начало массива чертей
	MOV	#<Z24220 - 240.>, R1
	MOV	Z01710, R0	; Номер лабиринта
Z05034:	ADD	#000360, R1	; 240. байт занимает один лабиринт
	SOB	R0, Z05034	; повторяем пока не найдём нужный лабиринт
	MOV	R1, Z01714	; Сохраняем адрес начала текущего лабиринта
	MOV	#Z11410, Z01704	; Адрес начала образа лабиринта
	MOV	R1, Z01706	; Сохраняем адрес текущего лабиринта
	MOV	#103465, Z01720	; начальное значение (потом будем добавлять по 800.)
	MOV	#000024, Z01712	; 20. строк
; Цикл по строкам
Z05074:	MOV	Z01720, R3
	MOV	#6, R5		; 6 слов по 5 триплетов = 30 элементов в строке
; Цикл по R5 -- по словам
Z05104:	MOV	Z01706, R1	; Получаем адрес откуда читаем лабиринт
	MOV	(R1), R0	; Читаем очередное слово
	MOV	#5, R4		; 5 -- количество триплетов в слове
; Цикл по R4 -- по триплетам в слове
Z05116:	MOV	R0, R2
	BIC	#107777, R2	; оставить только биты 12-14 -- верхний триплет
	MOV	#000014, R1	; 12. раз
Z05130:	ROR	R2		; повторить битовый сдвиг вправо
	SOB	R1, Z05130	; в итоге оставленные биты передвинуты в 0-2 биты
; Дальше рисуем элемент для прочитанного триплета
	MOV	Z01704, R1	; Получаем адрес в образе лабиринта
	CMP	R2, #6		; R2 = 6 ? сундук?
	BNE	Z05160		; нет => переходим
; R2 = 6 -- сундук
	BR	Z05456
;
Z05150:	MOVB	R2, (R1)
Z05152:	BR	Z05270
;
Z05154:	INC	Z01766		; количество сундуков
Z05160:	MOVB	R2, (R1)
	CMP	R2, #000004	; R2 = 4 ? это чёрт?
	BNE	Z05240		; Нет => переходим
; R2 = 4 -- чёрт
	CMP	Z01762, #000024	; чертей меньше 20. ?
	BMI	Z05210		; да => переходим
Z05200:	CLR	R2
;	NOP     
	MOVB	R2, (R1)
Z05206:	BR	Z05270
; Сохраняем чёртика
Z05210:	INC	Z01762		; чертей на один больше
	MOV	Z01716, R2	; Адрес 5-словной записи объекта
	MOV	R3, (R2)+	; сохраняем адрес в растре
	MOV	R1, (R2)+	; сохраняем адрес в образе лабиринта
	CLR	(R2)+
	CLR	(R2)+
	CLR	(R2)+
	MOV	R2, Z01716	; Сохраняем новый адрес
	BR	Z05422
; R2 != 4
Z05240:	BR	Z05430
; Создаём человечка: подготовка объекта из 5-ти слов по 011100
Z05242:	MOV	#Z11100, R2	; Адрес игровой записи
	MOV	R3, (R2)+	; Адрес в растре
	MOV	R1, (R2)+	; Адрес в образе лабиринта
	CLR	(R2)+
	CLR	(R2)+
	CLR	(R2)+
	MOV	#000005, R2	; 5 -- человечек
	MOVB	R2, (R1)	; пишем в образ лабиринта
;	NOP	
; Переходим к следующему триплету
Z05270:	CLC			; Сдвигаем на три разряда влево
	ROL	R0              ; <
	ROL	R0              ; <
	ROL	R0              ; <
	CALL	Z16712
; Получаем адрес спрайта по индексу R2
Z05304:	MOV	#Z13540, R1	; Начало таблицы спрайтов
	TST	R2		
	BEQ	Z05322
Z05314:	ADD	#000024, R1	; Переход к следующему спрайту
	SOB	R2, Z05314
; Приступаем к рисованию спрайта; R1 = адрес спрайта в 10 слов -- 8x10 цветных пикселей
Z05322:	MOV	#000012, R2	; Повторить для 10. строк
Z05326:	MOV	R3, @#176640
	MOV	(R1)+, @#176642	; записываем 8 цветных пикселей в растр
	ADD	#80., R3	; плюс 80. -- переход к следующей строке растра
	SOB	R2, Z05326	; продолжаем цикл по строкам
	SUB	#799., R3	; минус 799. -- возвращаемся на 10. строк назад, плюс 8 цветных пикселей вперёд
	DEC	R4		; Уменьшаем счётчик триплетов
	BNE	Z05116		; Если не последний триплет, то переходим
	ADD	#000002, Z01706	; инкремент адреса откуда читаем -- к следующему слову
	DEC	R5		; цикл по словам
	BNE	Z05104		; переход если не закончили
; Закончили рисовать строку лабиринта
Z05360:	ADD	#800., Z01720	; добавляем 800. -- плюс 10. строк растра
	DEC	Z01712		; Продолжаем цикл по строкам
	BNE	Z05074		;   по значению (001712)
; Закончили рисовать лабиринт -- дальше подготовка выхода из лабиринта
Z05374:	MOV	Z01710, R2	; Берём номер лабиринта
;	NOP	
	ADD	#Z11000, R2	; Добавляем адрес 011000
	MOVB	(R2), R3	; и получаем оттуда байт
	ADD	#Z11410, R3	; Добавляем адрес начала образа лабиринта
	MOV	R3, Z01774	; и сохраняем -- адрес выхода в лабиринте
	RETURN	
;
Z05422:	MOV	#000004, R2
	BR	Z05270		; Переходим к следующему триплету, спрайт и продолжаем
; R2 != 4
Z05430:	CMP	R2, #000005
	BNE	Z05270		; Переходим к следующему триплету, спрайт и продолжаем
; R2 = 5 -- человек
Z05436:	TST	Z01702		; Количество человеков нулевое?
	BEQ	Z05450		; да => переходим
	CLR	R2
	BR      Z05150
;
Z05450:	INC	Z01702		; теперь есть один человек
	BR	Z05242		; Создаём человечка
; R2 = 6 -- сундук
Z05456:	TST	Z11306
	BEQ	Z05154
	TSTB	(R1)
Z05466:	BNE	Z05154
	CLR	R2
	BR	Z05270

; Подпрограмма вывода игрового объекта: R2 = адрес в растре, R3 = адрес в образе лабиринта
Z05500:	CMP	Z01720, #024000	; Начинаем с поиска игровых объектов
	BEQ	Z05526		; таких не было => выводим новый
	MOV	#024000, R4
Z05514:	CMP	(R4)+, R3	; это он?
	BEQ	Z05602		; да => выходим
	CMP	R4, Z01720	; перебрали все?
	BNE	Z05514		; нет => продолжаем
Z05526:	MOVB	(R3), R5	; получаем номер спрайта
	MOV	#Z13540, R4	; Начало таблицы спрайтов, по 10. слов на спрайт
	TSTB	R5		; спрайт #0 ?
	BEQ	Z05546		; да => переходим
Z05540:	ADD	#000024, R4	;   плюс 20. -- следующий спрайт
	SOB	R5, Z05540	;   повторяем
Z05546:	MOV	#000012, R5	; 10 раз
Z05552:	MOV	R2, @#176640	;   адрес для вывода пикселей
	MOV	(R4)+, @#176642	;   выводим 8 цветных пикселей
	ADD	#80., R2	;   плюс одна строка растра
	SOB	R5, Z05552	;   повторяем
	SUB	#800., R2	; возвращаем адрес растра обратно на 10. строк вверх
	MOV	Z01720, R4	; Теперь запоминаем что объект выводился
	MOV	R3, (R4)	; сохраняем адрес в образе лабиринта
	ADD	#000002, Z01720
Z05602:	RETURN	
;
Z05604:	JMP	Z17700
; Вывод поверх следующего элемента
Z05610:	INC	R2		; плюс 8 пикселей в растре
	INC	R3		; к следующему элементу
	CALL	Z05500		; Вывод игрового объекта
	DEC	R2		; минус 8 пикселей в растре
	MOV	#000012, R5	; 10 раз
Z05632:	MOV	R2, @#176640
	BIS	(R0)+, @#176642	;   выводим поверх
	INC	R2
	MOV	R2, @#176640
	BIS	(R0)+, @#176642	;   выводим поверх
	ADD	#79., R2	;   следующая строка растра - 8 пикселей
	SOB	R5, Z05632	;   повторяем
Z05644:	RETURN	

Z05646:	JMP	Z17726
; Вывод поверх предыдущего элемента
Z05652:	DEC	R2		; минус 8 пикселей в растре
	DEC	R3		; к предыдущему элементу
	CALL	Z05500		; Вывод игрового объекта
	MOV	#000012, R5	; 10 раз
Z05670: MOV	R2, @#176640	;   адрес для вывода пикселей
	BIS	(R0)+, @#176642	;   выводим поверх
	INC	R2
	MOV	R2, @#176640
	BIS	(R0)+, @#176642	;   выводим поверх
	ADD	#79., R2	;   следующая строка растра - 8 пикселей
	SOB	R5, Z05670	;   повторяем
Z05702:	RETURN	
; Подпрограмма вывода ???; R2 = адрес в растре, R0 = адрес спрайта
Z05704:	CMP	R0, #012000	; R0 < 012000 ?
	BMI	Z05740		; да => вывод всего на 5 строк растра ниже
	ADD	#800., R2	; плюс 10 строк в растре
	CALL	Z05500		; Вывод игрового объекта
	SUB	#800., R2	; минус 10 строк в растре
	SUB	#000036, R3	; минус одна строка в образе лабиринта
	CALL	Z05500		; Вывод игрового объекта
	BR	Z05770
Z05740:	ADD	#400., R2	; плюс 5 строк в растре
	CALL	Z05500		; Вывод игрового объекта
	SUB	#800., R2	; минус 10 строк в растре
	SUB	#000036, R3	; минус одна строка в образе лабиринта
	CALL	Z05500		; Вывод игрового объекта
	ADD	#400., R2	; плюс 5 строк в растре
Z05770:	MOV	#000012, R5	; 10 раз
Z05774: MOV	R2, @#176640
	BIS	(R0)+, @#176642	;   рисуем поверх
	ADD	#80., R2	;   следующая строка растра
	SOB	R5, Z05774	;   повторяем
Z06004:	RETURN	
; Подпрограмма вывода ???; R2 = адрес в растре, R0 = адрес спрайта
Z06006:	CMP	R0, #012000	; R0 < 012000 ?
	BMI	Z06046		; да => вывод всего на 5 строк выше
	SUB	#800., R2	; минус 10 строк растра
	CALL	Z05500		; Вывод игрового объекта
	ADD	#800., R2	; плюс 10 строк растра
	ADD	#000036, R3	; плюс одна строка в образе лабиринта
;	NOP	
;	NOP	
	CALL	Z05500		; Вывод игрового объекта
	BR	Z06076
Z06046:	SUB	#400., R2	; минус 5 строк растра
	CALL	Z05500		; Вывод игрового объекта
	ADD	#800., R2	; плюс 10 строк растра
	ADD	#000036, R3	; плюс одна строка в образе лабиринта
	CALL	Z05500		; Вывод игрового объекта
	SUB	#400., R2	; минус 5 строк растра
Z06076:	MOV	#000012, R5	; 10 раз
Z06102:	MOV	R2, @#176640
	BIS	(R0)+, @#176642	;   рисуем поверх
	ADD	#80., R2	;   следующая строка растра
	SOB	R5, Z06102	;   повторяем
Z06112:	RETURN	
; Подпрограмма ??? игровая логика; R0 = адрес в образе лабиринта
Z06114:	CMP	R1, #000001
	BNE	Z06130
	CALL	Z06152
	BR	Z06150
Z06130:	CMP	R1, #000003
	BNE	Z06144
	CALL	Z06152
	BR	Z06150
Z06144:	CALL	Z16366
Z06150:	RETURN	
; Подпрограмма ??? игровая логика
Z06152:	ADD	#000036, R0	; к следующей строке лабиринта
	TSTB	(R0)		; пустой элемент ?
	BNE	Z06172		; нет => переходим
	MOV	#000002, Z01732	; состояние -- падаем
	BR	Z06334		; на выход
Z06172:	CMPB	(R0), #000007	; под нами лестница ?
	BNE	Z06214		; нет => переходим
	MOV	#000002, R4
	CALL	Z06460
	TST	R5
	BNE	Z06334		; на выход
Z06214:	SUB	#000036, R0	; возвращаемся к текущему элементу лабиринта
	CMPB	(R0), #000007	; лестница ?
	BNE	Z06254		; нет => переходим
	SUB	#000036, R0	; к предыдущей строке лабиринта
	CMPB	(R0), #000007	; лестница ?
	BNE	Z06254		; нет => переходим
	MOV	#000004, R4
	CALL	Z06460
	TST	R5
	BNE	Z06334		; на выход
Z06254:	JMP	Z17404
Z06260:	INC	R0
	CMP	R1, #000001
	BEQ	Z06274
	SUB	#000002, R0
Z06274:	CMPB	(R0), #000001
	BMI	Z06332
	CMPB	(R0), #000002
	BHI	Z06332
	CMP	R1, #000001
	BNE	Z06324
	MOV	#000003, R3
	BR	Z06334		; на выход
Z06324:	MOV	#000001, R3
	BR	Z06334		; на выход
Z06332:	MOV	R1, R3
Z06334:	RETURN	
;
Z06336:	JMP	Z16422
;
Z00634:	CALL	Z16556
Z06352:	.WORD	504
;
Z06354:	MOV	#3, R5
Z06360:	CALL	Z16556
Z06364:	.WORD	504
;Z06366:	NOP
;Z06370:	NOP
;Z06372:	NOP
;Z06374:	NOP
;Z06376:	NOP
;Z06400:	NOP
;Z06402:	NOP
Z06404:	CMP	R1, #000002
	BNE	Z06420	
	ADD	#000037, R0	; к следующей строке +1 элемент
	BR	Z06424
Z06420:	SUB	#000035, R0	; к предыдущей строке +1 элемент
Z06424:	CMPB	(R0), #000007	; лестница ?
	BNE	Z06436		; нет => переходим
	MOV	R1, R3
	BR	Z06456
Z06436:	CMP	R1, #000002
	BNE	Z06452
	MOV	#000004, R3
Z06450:	BR	Z06456
Z06452:	MOV	#000002, R3
Z06456:	RETURN	
; Подпрограмма ??? (выбор направления); R0 = адрес в образе лабиринта; R4 = направление?
Z06460:	MOV	Z11102, R2
	CALL	Z06572		; получаем в R2 колонку, в R3 строку
	MOV	R3, R5		; запоминаем строку
	MOV	R2, Z01706	; сохраняем колонку
	MOV	R0, R2
	CALL	Z06572		; получаем в R2 колонку, в R3 строку
	CMP	R3, R5		; строка меньше?
	BMI	Z06520		; да => переходим
	CMP	R4, #000004
	BEQ	Z06562
	BR	Z06532
Z06520:	CMP	R3, R5		; на той же строке?
	BEQ	Z06532		; да => переходим
	CMP	R4, #000002
	BEQ	Z06562
Z06532:	CMP	R2, Z01706      ; колонка меньше? мы слева?
	BMI	Z06550          ; да => переходим
	CMP	R4, #000003
	BEQ	Z06562
	BR	Z06556
Z06550:	CMP	R4, #000001
	BEQ	Z06562
Z06556:	JMP	Z23150
Z06562:	JMP	Z23202
;Z06566:	NOP
Z06570:	RETURN	
; Подпрограмма: R2 = адрес в образе лабиринта; возвращает в R2 колонку, в R3 строку.
Z06572:	CLR	R3
	SUB	#Z11410, R2	; убираем адрес начала лабиринта, оставляя индекс
Z06600:	INC	R3
	CMP	R2, #000036	; R2 < 30. ?
	BMI	Z06570		; переход на RETURN
	SUB	#000036, R2	; минус 30. -- к предыдущей строке лабиринта
Z06614:	BR	Z06600
; Подпрограмма ???
Z06616:	MOV	Z01730, R3	; Адрес в образе лабиринта
	MOV	Z01726, R2	; Адрес в растре
	CALL	Z20376
;	NOP	
;	NOP	
	ADD	#400., R2	; ниже на 5 строк растра
	MOV	#000012, R5	; 10. раз
Z06646: MOV	R2, @#176640	;   адрес для вывода пикселей
	MOV	(R0)+, @#176642	;   выводим 8 цветных пикселей
	ADD	#80., R2	;   плюс одна строка растра
	SOB	R5, Z06646	;   повторяем
	SUB	#800., R2	; возвращаемся на 10. строк выше
	MOV	R2, Z01726	; сохраняем новый адрес в растре
	INC	Z01736
	CMP	Z01736, #000002
	BNE	Z06760		; не равно => переход на RETURN
; R2 = 30.
Z06702:	CLR	Z01736
	MOV	Z01730, R2	; берём адрес в образе лабиринта
	ADD	#000036, Z01730	; добавляем 30. -- к следующей строке
	ADD	#000074, R2	; плюс 60. -- на две строки вниз
	BR	Z06762
Z06730:	TST	Z01760
	BNE	Z06744
	CMPB	(R2), #000010
	BEQ	Z06756
Z06744:	CLR	Z01732
	CLR	Z01734
	BR	Z06760
Z06756:	CLRB	(R2)
Z06760:	RETURN	
Z06762:	TSTB	(R2)
	BEQ	Z06760
	CMPB	(R2), #000006
	BEQ	Z06760
Z06774:	BR	Z06730
;Z06776:	.WORD	0		; ???
;
; Подпрограмма ??? игровая логика; по адресу 001726 игровой объект из 5-ти слов
Z07000:	MOV	#Z13160, Z01722	; адрес блока спрайтов
	MOV	#013704, Z01724	; адрес блока спрайтов
	MOV	#024000, Z01720
	MOV	Z01732, R0	; берём состояние объекта
	CMP	R0, #000001
	BNE	Z07040
Z07034:	JMP	Z07776
;
Z07040:	CMP	R0, #000002	; падаем ?
	BNE	Z07062		; нет => переходим
	MOV	Z01724, R0	; адрес блока спрайтов
	CALL	Z06616
	JMP	Z07776
Z07062:	JMP	Z16336

Z07070: NOP;STUB	MOV	177714, R0
	TST	R0
	BR	Z07104
Z07100:	JMP	Z07776
Z07104:	CMP	R0, Z01752
	BNE	Z07266
	MOV	Z01730, R1
	ADD	#000036, R1
	CMPB	(R1), #2
	BNE	Z07266
	BR	Z07170
;
Z07132:	.TTINR			; Нажата клавиша?
	BCS	Z07262		; нет => переходим
	CMPB	R0, Z01752	; код клавиши "вырыть яму" ?
	BNE	Z07262		; нет => переходим
	MOV	Z01730, R1	; берём адрес в образе лабиринта
	ADD	#000036, R1	; к следующей строке лабиринта
	CMPB	(R1), #000002	; под нами 2 - кирпичная стена ?
	BNE	Z07262		; нет => переходим
Z07170:	CMP	Z01740, #011270
	BHI	Z07262
	JMP	Z16252
Z07204:	NOP	
	CALL	Z17014
	CALL	Z17102
	MOV	#000012, R5	; 10. раз
Z07222: MOV	R2, @#176640
	CLR	@#176642	;   очищаем 8 пикселей
	ADD	#80., R2	;   к следующей строке растра
	SOB	R5, Z07222	;   повторяем
	MOVB	#000010, (R1)
	MOV	Z01740, R3
	MOV	R1, (R3)+
	SUB	#800., R2	; на 10. строк выше
	MOV	R2, (R3)+
	MOV	Z11310, (R3)+
	MOV	R3, 001740
Z07262:	CALL	Z17502
Z07266:	MOV	Z01730, R1	; берём адрес в образе лабиринта
	ADD	#000036, R1	; добавляем 30. -- к следующей строке
	JMP	Z16300
Z07302:	CMPB	(R1), #000010
	BNE	Z07336
; Вход: переходим сюда когда под игровым объектом пусто -- проваливается
Z07310:	MOV	#000002, Z01732	; состояние -- падаем
	CALL	Z23052
	MOV	Z01724, R0	; адрес блока спрайтов
	CALL	Z06616
	JMP	Z07776
Z07336:	MOV	Z01730, R1	; берём адрес в образе лабиринта
	CMP	R0, Z01744
	BNE	Z07570
; Вход: ???
Z07350:	DEC	R1
	CMPB	(R1), #000001
	BMI	Z07366
	CMPB	(R1), #000003
	BMI	Z07560
Z07366:	CMP	Z01734, #000003
	BEQ	Z07452
	TST	Z01736
	BEQ	Z07452
Z07404:	JMP	Z14572
Z07410:	CMP	Z01734, #000003
	BNE	Z07430
	CLR	Z01734
	JMP	Z16204
Z07430:	JMP	Z14572
;
Z07434:	SUB	Z01736, R5
	MOV	R5, Z01736
Z07444:	BR	Z07452
Z07446:	JMP	Z16250
;
Z07452:	MOV	Z01730, R3	; берём адрес в образе лабиринта
	MOV	Z01726, R2	; берём адрес в растре
	CALL	Z15672
	MOV	Z01736, R5
	TST	R5
	BEQ	Z07504
Z07476:	ADD	#000050, R0	; плюс 40.
	SOB	R5, Z07476
Z07504:	CALL	Z05646
	INC	Z01736
	CMP	Z01736, #000003
	BNE	Z07546
	SUB	#1, Z01726	; на 8 цветных пикселей левее
	DEC	Z01730		; адрес в лабиринте -- к предыдущему элементу
	CLR	Z01732
	CLR	Z01736
Z07546:	MOV	#000003, Z01734
	JMP	Z07776
Z07560:	JMP	Z07410
;
Z07564:	JMP	Z07776
;
Z07570:	CMP	R0, Z01742
	BNE	Z07772
Z07576:	INC	R1
	CMPB	(R1), #000001
	BMI	Z07614
	CMPB	(R1), #000003
	BMI	Z07636
Z07614:	CMP	Z01734, #000001
	BEQ	Z07676
	TST	Z01736
	BEQ	Z07676
	JMP	Z14572
Z07636:	CMP	Z01734, #000001
	BNE	Z07656
	CLR	Z01734
	JMP	Z16204
Z07656:	JMP	Z14572
;
Z07662:	.WORD	172052
;
Z07670:	BR	Z07676
Z07672:	JMP	Z16270
;
Z07676:	MOV	Z01730, R3	; берём адрес в образе лабиринта
	MOV	Z01726, R2	; берём адрес в растре
	MOV	Z01722, R0	; адрес блока спрайтов??
	MOV	Z01736, R5
	TST	R5
	BEQ	Z07730
Z07722:	ADD	#000050, R0	; плюс 40.
	SOB	R5, Z07722
Z07730:	CALL	Z05604
	INC	Z01736
	CMP	Z01736, #000003
	BEQ	Z07762
Z07750:	MOV	#000001, Z01734
	JMP	Z07776
Z07762:	CLR	Z01732
	JMP	Z14044
Z07772:	JMP	Z14066
Z07776:	RETURN	

Z10000::
	.BLKW	4
Z10010:	.BLKW	9.		; Спрайт -- символ копирайта

Z10106:	TST	Z11110
	BNE	Z10120
	MOV	R0, Z11314
Z10120:	RETURN	
Z10122:	ADD	#000036, R1	; следующая строка лабиринта??
	CMPB	(R1), #000003
	BNE	Z10140
	JMP	Z14376
Z10140:	JMP	Z14362
Z10144:	SUB	#000002, R0
	CMPB	(R0), #000001
	BMI	Z10164
	CMPB	(R0), #000003
	BMI	Z10212
Z10164:	MOV	#000003, R4
	CALL	Z06460
	TST	Z01704
	BNE	Z10206
Z10202:	MOV	R4, R3
Z10204:	RETURN
Z10206:	TST	R5
	BNE	Z10204
Z10212:	ADD	#000037, R0	; следующая строка лабиринта + 1 место
	CMPB	(R0), #000006	; 6 - сундук?
	BMI	Z10250
	MOV	#2, R4
	CALL	Z06460
	TST	Z01704
	BNE	Z10244
	BR	Z10202
Z10244:	TST	R5
	BNE	Z10204
Z10250:	SUB	#000036, R0	; следующая строка лабиринта
	CMPB	(R0), #000007	; 7 - лестница?
	BNE	Z10316
Z10274:	MOV     #4, R4
	CALL    Z06460
	TST     Z01704
	BEQ     Z10202
	TST     R5
	BNE     Z10204
Z10316:	TST	Z01704
	BEQ	Z10334
	CLR	Z01704
Z10330:	JMP	Z17410
;
Z10334: MOV	Z01730, R0	; берём адрес в образе лабиринта
Z10340:	JMP	Z06260

	.BLKW	211		; ADDRESS ALIGNMENT GAP
Z10700::	; Блок из двух спрайтов -- чёртик на лестнице
	.WORD	016030,016030,012050,036074,014030,014030,014034,020004,020006,060000
	.WORD	014070,014070,012050,036074,036074,034034,014030,020004,022044,002004
Z10750::	; Спрайт -- выход из лабиринта
	.WORD	177777,100601,136675,122645,116635,122645,122645,136675,100601,177777

	.BLKW	2		; ADDRESS ALIGNMENT GAP
; Номера ячеек выхода из лабиринта
Z11000::
	.BYTE	25, 24, 01, 02, 17, 01, 27, 24, 20, 00
	.BYTE	22, 35, 05, 15, 34, 16, 02, 30, 14, 34
	.BYTE	34, 34, 33, 34, 35
	.EVEN

; Подпрограмма ???
Z11040:	INC	Z01714		; 
	TST	Z01754
	BEQ	Z11056
;
Z11056:	RETURN	

; Подпрограмма ???
Z11066:	CLR	Z01714
Z11072:	JMP	Z17004

	.BLKW	11		; ADDRESS ALIGNMENT GAP
Z11100::
	.BLKW	5		;TODO: Уточнить, неясно сколько нужно
Z11102	= Z11100 + 2
Z11104	= Z11100 + 4
Z11106	= Z11100 + 6
Z11110	= Z11100 + 10

; Проигрывание мелодии: R2 = адрес блока
Z11112:	NOP	;TSTB	177660
	BPL	Z11126
Z11120:	NOP	;TST	177662
	RETURN
Z11126:	MOV	(R2)+, R4
	MOV	(R2)+, R3
Z11132:	CALL	Z17200
	SOB	R3, Z11132
Z11140:	JMP	Z20744

Z11144:	.ASCII	/NE TOT TIP FAJLA !!!/
	.EVEN

	.BLKW	6		; ADDRESS ALIGNMENT GAP
Z11200::
	.BLKW	40		; ???
Z11202	= Z11200 + 2		; Адрес в растре
Z11204	= Z11200 + 4

Z11300:	.WORD	1		; ???
Z11302:	.WORD	0		; ??? очищается, инкрементируется, сравнивается с 10.
Z11304:	.WORD	0		; ??? очищается, инкрементируется
Z11306:	.WORD	0		; ??? очищается, инкрементируется
Z11310:	.WORD	0		; ??? инициализируется 70, добавляется/вычитается 3
Z11312:	.WORD	0		; ???
Z11314:	.WORD	32		; ??? сравнивается с 14
Z11316:	.WORD	177777		; ??? сравнивается с количеством очков

	.BLKW	34		; ADDRESS ALIGNMENT GAP
; Образ текущего лабиринта, байт на элемент, 30. байт на строку, 600. байт всего
Z11410::
	.BLKB	600.
	.BYTE	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1  ; Пол

; Блоки спрайтов
SPRITE:
Z12600::	; Два блока спрайтов чёртика в движении
	.WORD	140300,000000,140300,000001,040100,000000,170360,000401,174350,001407
	.WORD	164350,000000,160340,000000,130040,000401,110060,000401,010060,000000
	.WORD	000000,003006,000000,003016,000000,001002,100200,003407,140300,017437
	.WORD	120240,003407,100000,003407,100000,002415,140300,002415,040300,002014
	.WORD	000000,000000,000000,014030,000000,014070,000000,017074,000000,077176
	.WORD	000000,037074,000000,016074,000000,036074,000000,017036,000000,014030
Z12770::
	.WORD	000000,001403,100000,001403,000000,001002,100200,007417,160340,013437
	.WORD	000000,013427,000000,003407,100200,002015,100200,006011,000000,006010
	.WORD	060140,000000,070140,000000,040100,000000,160340,000401,174370,001403
	.WORD	160340,002405,160340,000000,130240,000001,130240,001403,030040,001402
	.WORD	000000,000000,014030,000000,016030,000000,036170,000000,077176,000000
	.WORD	036174,000000,036070,000000,036074,000000,074170,000000,014030,000000
Z13160:		; Два блока спрайтов человечка в движении
	.WORD	140300,000000,140300,000000,040100,000000,160340,000000,150320,000401
	.WORD	140300,000000,120240,000000,020040,000401,010020,000401,010020,000000
	.WORD	000000,003006,000000,003006,000000,001002,100200,001403,040100,007417
	.WORD	000000,001403,000000,001002,100200,002405,000000,002004,000000,002004
	.WORD	000000,000000,000000,014030,000000,014030,000000,006014,000000,017076
	.WORD	000000,007014,000000,006014,000000,016034,000000,007016,000000,004010
Z13350:
	.WORD	000000,001403,000000,001403,000000,001002,000000,003407,100200,005413
	.WORD	000000,001403,000000,002405,100200,002004,100200,004010,000000,004010
	.WORD	060140,000000,060140,000000,040100,000000,140300,000401,170360,001002
	.WORD	140300,000000,040100,000000,120240,000401,020040,000000,020040,000000
	.WORD	000000,000000,014030,000000,014030,000000,030060,000000,076170,000000
	.WORD	030160,000000,030060,000000,034070,000000,030160,000000,010020,000000
Z13540::	; Блок из 8-ми спрайтов для рисования лабиринта, по 10. слов на спрайт
	.WORD	000000,000000,000000,000000,000000,000000,000000,000000,000000,000000	; 0 -- пусто
	.WORD	177400,177400,177400,177400,177400,177400,177400,177400,177400,177400	; 1 -- сплошная стена
	.WORD	175400,175400,175400,175400,000000,157400,157400,157400,157400,000000	; 2 -- кирпичная стена
	.WORD	000000,177777,000000,000000,000000,000000,000000,000000,000000,000000	; 3 -- верёвка
Z13660:	.WORD	014030,055132,045122,077176,036074,036074,014030,022044,022044,022044	; 4 -- чёрт (стоит)
Z13704:	.WORD	014030,055132,045122,036074,014030,014030,002040,022044,022044,063146	; 5 -- человек (стоит)
	.WORD	000000,014030,032044,065102,065112,077176,077176,077176,077176,000000	; 6 -- сундук
	.WORD	041000,041000,077000,041000,041000,041000,041000,077000,041000,041000	; 7 -- лестница
SPREND:	; Конец блока спрайтов

Z14044:	ADD	#1, Z01726	; Плюс одно слово для адреса в растре
	INC	Z01730		; К следующему элементу в образе лабиринта
	CLR	Z01736
	JMP	Z07750
Z14066:	CMP	R0, Z01746
	BNE	Z14350
Z14074:	CMPB	(R1), #000007	; лестница?
	BNE	Z14264
	SUB	#000036, R1	; на строку выше
	CMPB	(R1), #000007	; над нами лестница?
	BNE	Z14260
	CMP	Z01734, #000004	; вверх?
	BEQ	Z14140
	TST	Z01736
	BEQ	Z14140

Z14140:	MOV	Z01730, R3	; берём адрес в образе лабиринта
	NOP	
	NOP	
	TST	Z01736
	BNE	Z14164
	MOV	#Z10700, R0
	BR	Z14170
Z14164:	MOV	#Z13660, R0
Z14170:	TST	Z01760
	BNE	Z14202
	ADD	#000024, R0	; плюс 20.
;
Z14202:	SUB	#400., Z01726	; Адрес растра на 5 строк выше
	CALL	Z15716
	INC	Z01736
	CMP	Z01736, #000002
	BNE	Z14246
	SUB	#000036, Z01730	; Адрес в лабиринте -- на строку выше
	CLR	Z01732
	CLR	Z01736
Z14246:	MOV	#000004, Z01734
	JMP	Z07776
Z14260:	ADD	#000036, R1	; следующая строка лабиринта
Z14264:	MOV	Z01734, R0
	TST	R0
	BEQ	Z14344
	CMP	R0, #000004
	BNE	Z14312
Z14302:	CLR	Z01734
	JMP	Z16204
Z14312:	CMP	R0, #000001
	BNE	Z14324
	JMP	Z07576
Z14324:	CMP	R0, #000002
	BEQ	Z14356
	CMP	R0, #000003
	BNE	Z14344
	JMP	Z07350
Z14344:	JMP	Z07776
Z14350:	CMP	R0, Z01750
	BNE	Z14554
Z14356:	JMP	Z10122
Z14362:	CMPB	(R1), #000007
	BEQ	Z14376
	SUB	#000036, R1
	BR	Z14544
Z14376:	CMP	Z01734, #000002
	BEQ	Z14424
	TST	Z01736
	BEQ	Z14424
Z14424:	MOV	Z01730, R3	; берём адрес в образе лабиринта
	NOP	
	NOP	
	TST	Z01736
	BNE	Z14450
	MOV	#Z10700, R0
	BR	Z14454
Z14450:	MOV	#Z13660, R0
Z14454:	TST	Z01760
	BNE	Z14466
	ADD	#000024, R0	; плюс 20.
Z14466:	ADD	#400., Z01726	; Ниже на 5 строк в растре
	CALL	Z15730
	INC	Z01736
	CMP	Z01736, #000002
	BNE	Z14532
	ADD	#000036, Z01730	; Адрес в лабиринте на строку ниже
	CLR	Z01732
	CLR	Z01736
Z14532:	MOV	#000002, Z01734
	JMP	Z07776
Z14544:	CMP	Z01734, #000002
	BEQ	Z14302
Z14554:	MOV	Z01734, R0
	CMP	R0, #000004
	BNE	Z14312
	JMP	Z14074
Z14572:	MOV	Z01730, R1	; берём адрес в образе лабиринта
Z14576:	BR	Z14554

; Подпрограмма: вызывается по выбору пункта ИГРА в меню
Z14600:	MOV	#000012, Z01756	; 10. -- начальное количество жизней
	CALL	Z20540		; Сбрасываем Номер лабиринта в 1
	NOP	
	CALL	Z20364
	CALL	Z16752
; Вход: после очередной смерти человечка
Z14624:	MOV	Z01770, Z01710	; Номер текущего уровня лабиринта
	CALL	Z04030		; очистка экрана и рисование рамки игрового поля
	CALL	Z15760		; Отрисовать лабиринт
	CALL	Z21636		; ??? Переход к ожиданию перед игрой
	CALL	Z11066
	CALL	Z20172		; Вывод статусной строки
	MOV	#Z11200, Z01740
Z14664:	CLR	Z01760
	MOV	#Z11100, R0	; Отсюда -- из игровой записи человечка
	MOV	#Z01726, R1	;   сюда
	MOV	#000005, R2	;   5 раз
Z14704:	MOV	(R0)+, (R1)+	;   копируем пословно
	SOB	R2, Z14704	;   повторяем
	CALL	Z07000
	MOV	#Z11100, R0	; Сюда -- в игровую запись человечка
	MOV	#Z01726, R1	;   отсюда
	MOV	#000005, R2	;   5 раз
Z14730:	MOV	(R1)+, (R0)+    ;   копируем пословно
	SOB	R2, Z14730	;   повторяем
	MOV	#Z12600, Z01722	; адрес блока спрайтов
	MOV	#Z13660, Z01724	; адрес блока спрайтов
	MOV	#000001, Z01760
;
Z14756:	MOV	Z01760, R5	; Получаем счётчик ???
	MOV	#<Z22070-12>, R0	;   начальный адрес (Z22070 - 12)
Z14766:	ADD	#000012, R0	;   плюс 10.
	SOB	R5, Z14766	;   повторяем
	MOV	R0, Z01764      ; Сохраняем адрес
	MOV	#Z01726, R1	;   сюда
	MOV	#000005, R2     ;   5 раз
Z15010:	MOV	(R0)+, (R1)+	;   копируем пословно
	SOB	R2, Z15010	;   повторяем
	MOV	Z01732, R0	; берём состояние объекта
	CMP	R0, #000001
	BEQ	Z15332
	CMP	R0, #000002	; падаем ?
	BNE	Z15046		; нет => переходим
	MOV	Z01724, R0	; берём адрес блока спрайтов
	CALL	Z06616
	BR	Z15332
Z15046:	TST	Z01736
	BNE	Z15074
	MOV	Z01730, R0	; берём адрес в образе лабиринта
	MOV	Z01734, R1
	CALL	Z06114
	MOV	R3, R0
	BR	Z15106
Z15074:	MOV	Z01734, R0
Z15100:	MOV	Z01730, R1	; берём адрес в образе лабиринта
	BR	Z15136
Z15106:	MOV	R0, R4
	CALL	Z17544
	TST	R5
	BNE	Z15100
	INC	Z01736
	JMP	Z17152
Z15130:	MOV	Z01730, R1	; берём адрес в образе лабиринта
	BR	Z15262
Z15136:	ADD	#000036, R1	; плюс 30. -- на строку ниже
	CMPB	(R1), #000000	; пустой элемент?
	BNE	Z15156		; нет => переходим
; Ниже на строку пусто -- проваливается
Z15150:	CALL	Z07310
	BR	Z15332
Z15156:	CMPB	(R1), #000010
	BNE	Z15130
	NOP	
	NOP	
	NOP	
	NOP	
	MOVB	#000005, (R1)
	MOV	Z01726, R2	; берём адрес в растре
	MOV	Z01730, R3	; берём адрес в образе лабиринта
	CALL	Z05526
	ADD	#000001, R2	; плюс 8 пикселей
	INC	R3
	CALL	Z05526
	ADD	#799., R2	; плюс 10 строк растра минус 8 пикселей
	MOV	#000012, R5	; 10. раз
	MOV	Z01724, R0	; берём адрес блока спрайтов
Z15242:	MOV	R2, @#176640
	MOV	(R0)+, @#176642	;   заполняем 8 пикселей
	ADD	#80., R2	;   к следующей строке растра
	SOB	R5, Z15242	;   повторяем
	JMP	Z16600
;
Z15260:	BR	Z15332
;
Z15262:	CMP	R0, #000003	; влево?
	BNE	Z15276
	CALL	Z07350		; Сдвигается один чёрт
	BR	Z15332
Z15276:	CMP	R0, #000001	; вправо?
	BNE	Z15312		; нет => переходим
	CALL	Z07576
	BR	Z15332
Z15312:	CMP	R0, #000004	; вверх?
	BNE	Z15326
Z15320:	CALL	Z14074
	BR	Z15332
Z15326:	CALL	Z14356
;
Z15332:	MOV	Z01764, R0	; Получаем адрес куда копировать
	MOV	#Z01726, R1	;   отсюда
	MOV	#000005, R2	;   5 раз
Z15346:	MOV	(R1)+, (R0)+	;   копируем пословно
	SOB	R2, Z15346	;   повторяем
	INC	Z01760
	CMP	Z01760, Z01762
	BHI	Z15372
	JMP	Z14756
Z15372:	CALL	Z16212
	JMP	Z17514
Z15402:	CMP	(R0), #000057
	BMI	Z15430
	CLR	(R0)
	CALL	Z20302
	CALL	Z20236
	NOP	
	NOP	
	NOP	
Z15430:	MOV	Z11102, R0
	CMPB	(R0), #000006	; это сундук?
	BNE	Z15510		; нет => переходим
	NOP	
	ADD	#000012, Z01776	; плюс 10. очков
	INC	Z11302
	CLRB	(R0)		; удаляем сундук из образа лабиринта
	CALL	Z17126
	CMP	Z11302, #000012
	BMI	Z15510
;
Z15510:	TST	Z01766		; Сундуков больше не осталось?
	BNE	Z15604		; остались => переходим
	MOV	Z01774, R3	; берём адрес выхода из лабиринта
	SUB	#Z11410, R3	; вычитаем адрес начала образа лабиринта
	MOV	#103465, R1	; начальный адрес в растре (TODO уточнить)
	ADD	R3, R1
	MOV	#Z10750, R3	; спрайт выхода
	MOV	#000012, R2	; 10. строк
Z15546:	MOV	R1, @#176640
	MOV	(R3)+, @#176642	;   заполняем 8 пикселей
	ADD	#80., R1	;   к следующей строке
	SOB	R2, Z15546	;   повторяем
Z15556:	BR	Z15742
;
Z15560:	JMP	Z20554
;
Z15564:	CALL	Z20706
	CMP	Z01770, Z01772
	BHI	Z15714
Z15600:	JMP	Z15660
;
Z15604:	MOV	Z01762, R3	; Количество чертей
	MOV	#000001, R1
	MOV	#Z22072, R4	; начало массива чертей 022070 + 1 слово
Z15620:	MOV	(R4), R2	;   получаем адрес в образе лабиринта
	CMP	R0, R2		;   адрес тот же?
	BEQ	Z15636		;   да => выходим, минус одна жизнь
	ADD	#000012, R4	;   к следующей записи
	SOB	R3, Z15620	; повторяем для всех чертей
	BR	Z15654		; проверили всех, нет коллизий
Z15636:	CALL	Z17140		; Минус одна жизнь
	TST	Z01756		; количество жизней = 0 ?
	BEQ	Z15714		; да => переходим
	JMP	Z14624
Z15654:	JMP	Z14664
;
Z15660:	CLR	Z11306
	JMP	Z14624

Z15672:	MOV	R0, R5
	MOV	Z01722, R0	; адрес блока спрайтов
	NOP	
	NOP	
	NOP	
	ADD	#000170, R0	; плюс 120.
	RETURN	
Z15714:	BR	Z15772		; Количество жизней стало 0
;
Z15716:	MOV	Z01726, R2	; берём адрес в растре
	CALL	Z05704		; рисуем спрайт R0 с возможным смещением вниз
	RETURN	
;
Z15730:	MOV	Z01726, R2	; берём адрес в растре
	CALL	Z06006		; рисуем спрайт R0 с возможным смещением вверх
	RETURN	
;
Z15742:	TST	Z01766		; количество сундуков = 0 ?
	BNE	Z15604		; нет => переходим
	CMP	R0, Z01774
	BNE	Z15604
	BR	Z15560
; Подпрограмма ???
Z15760:	CALL	Z05000		; Рисование лабиринта
	INC	Z11306
	RETURN

Z15772:	JMP	Z22664

	.BLKW	35		; ADDRESS ALIGNMENT GAP
; Подпрограмма ??? игровая логика
Z16000::
	CMP	Z01740, #Z11200
	BLE	Z16164
	MOV	#Z11204, R0
	MOV	#000010, R3
Z16020:	DEC	(R0)
	ADD	#000006, R0
	SOB	R3, Z16020
	TST	Z11204
	BGT	Z16164
	MOV	Z11202, R1	; берём адрес в растре
	MOV	#013610, R2
	MOV	#000012, R3	; 10. раз
Z16052:	MOV	R1, @#176640
	MOV	(R2)+, @#176642	; вывод в растр
	ADD	#80., R1	; на строку растра ниже
	SOB	R3, Z16052
	SUB	#1600., R1	; на 20. строк растра выше
	MOV	R1, R5
	BR	Z16166
Z16072:	NOP	
	MOV	#011206, R3
Z16100:	MOV	(R3)+, (R2)+
	CMP	R3, #Z11300
	BNE	Z16100
	SUB	#000006, Z01740
	CMPB	(R1), #000005
	BNE	Z16146
	JMP	Z16626
Z16130:	CALL	Z17114
Z16134:	MOV	R5, @#176640
	BIS	(R0)+, @#176642	;   рисуем 8 пикселей поверх
	ADD	#80., R5	;   к следующей строке растра
	SOB	R2, Z16134	;   повторяем
	BR	Z16162
Z16146:	CMP	R1, Z11102
	BNE	Z16162
Z16154:	MOV	#013704, R0
	BR	Z16226
Z16162:	BR	Z16244
Z16164:	RETURN	
Z16166:	MOV	Z11200, R0
	MOV	R0, R1
	MOV	#Z11200, R2
	BR	Z16072
Z16204:	CLR	Z01736
Z16210:	RETURN	
; Подпрограмма ??? игровая логика
Z16212:	MOV	#024000, R1
Z16216:	SOB	R1, Z16216	; Цикл ожидания
	CALL	Z17044
Z16224:	RETURN
Z16226:	SUB	#000036, Z11102	; Вылезание из ямки?
	SUB	#001200, Z11100
	BR	Z16130
Z16244:	CALL	Z17030
Z16250:	RETURN	
Z16252:	TST	Z01736
	BNE	Z16272
	MOV	#000003, Z01732
	JMP	Z07204
;
Z16270:	RETURN	;STUB
;
Z16272:	JMP	Z14572
;

Z16300:	TSTB	(R1)		; пустой элемент ?
	BNE	Z16310		; нет => переходим
Z16304:	JMP	Z07310
;
Z16310:	CMPB	(R1), #000006
	BEQ	Z16304
	CMP	Z01732, #000003
	BNE	Z16332
	JMP	Z07336
Z16332:	JMP	Z07302
;
Z16336:	TST	Z01736
	BEQ	Z16350
	JMP	Z14572
;
Z16350:	TST	Z01754
	BEQ	Z16362
	JMP	Z07070
;
Z16362:	JMP	Z07132		; Переход к проверке клавиатуры
;
Z16366:	TST	R1
	BNE	Z16400
	CALL	Z06254
	RETURN	
Z16400:	CALL	Z06336
Z16404:	RETURN	

Z16422:	INC	R0
	TSTB	(R0)
	BEQ	Z16444
	CMPB	(R0), #000006
	BEQ	Z16444
	CMPB	(R0), #000007
	BNE	Z16474
Z16444:	ADD	#000036, R0	; к следующей строке лабиринта
	TSTB	(R0)
	BEQ	Z16470
	MOV	#000001, R4
	CALL	Z06460
	TST	R5
	BNE	Z16554
Z16470:	SUB	#000036, R0	; к предыдущей строке лабиринта
Z16474:	SUB	#000002, R0
	TSTB	(R0)
	BEQ	Z16520
	CMPB	(R0), #000006
	BEQ	Z16520
	CMPB	(R0), #000007
	BNE	Z16550
Z16520:	ADD	#000036, R0	; к следующей строке лабиринта
	TSTB	(R0)
	BEQ	Z16544
	MOV	#000003, R4
	CALL	Z06460
	TST	R5
	BNE	Z16554
Z16544:	SUB	#000036, R0	; к предыдущей строке лабиринта
Z16550:	JMP	Z06404
Z16554:	RETURN	
;
Z16556:	RETURN;STUB
;
Z16600:	MOV	#000001, Z01732
	ADD	#000036, Z01730	; переходим к следующей строке лабиринта
	ADD	#800., Z01726	; на 10. строк растра ниже
	JMP	Z15260
Z16626:	MOV	#Z13660, R0
	MOV	#022072, R2	; 022070 + 2
Z16636:	CMP	(R2), R1
	BEQ	Z16650
	ADD	#000012, R2	; плюс 10. -- к следующей записи
	BR	Z16636
Z16650:	SUB	#000036, (R2)	; на строку лабиринта выше
	SUB	#000002, R2
	SUB	#800., (R2)	; на 10 строк растра выше
	ADD	#000004, R2
	CLR	(R2)
	JMP	Z16130
Z16712:	INC	Z01704
	TST	Z11304
	BEQ	Z16742
	CMP	R2, #000004
	BEQ	Z16740
	CMP	R2, #000005
	BNE	Z16742
Z16740:	CLRB	(R1)
Z16742:	RETURN	

; Подпрограмма: ???
Z16752:	CLR	Z01776		; Обнуляем количество очков
	INC	Z11304
	RETURN	

; Подпрограмма: ???
Z17000:	CALL	Z20316
Z17004:	MOV	#000070, Z11310
	RETURN	
;
Z17014:	MOV	Z01726, R2	; берём адрес в растре
	ADD	#000003, Z11310
Z17026:	RETURN	
;
Z17030:	MOVB	#000002, (R1)
	SUB	#000003, Z11310
	RETURN	
; Подпрограмма ??? игровая логика
Z17044:	CALL	Z16000
	TST	Z11104
	BNE	Z17100
	TST	Z11106
	BEQ	Z17100
	TST	Z11110
	BNE	Z17100
	CALL	Z17226
	NOP	
Z17100:	RETURN	
;
Z17102:	ADD	#800., R2	; на 10 строк растра ниже??
	CALL	Z17252
	RETURN	
Z17114:	MOV	R5, R3
	CALL	Z20430
	RETURN	
Z17126:	DEC	Z01766		; сундуков стало меньше на один
	CALL	Z17322
Z17136:	RETURN	
;
Z17140:	DEC	Z01756		; Минус одна жизнь
	CALL	Z17360
Z17150:	RETURN	
;
Z17152:	ADD	#000002, R0
	CMP	R0, #000005
	BMI	Z17170
	SUB	#000004, R0
Z17170:	JMP	Z15100

; Звук
Z17200:	MOV	R4, R5
	NOP ;STUB	MOV	#000300, @#177716	;TODO
	NOP ;STUB
Z17210:	SOB	R5, Z17210
	MOV	R4, R5
	NOP ;STUB	MOV	#000200, @#177716	;TODO
	NOP ;STUB
Z17222:	SOB	R5, Z17222
Z17224:	RETURN	
;
Z17226:	MOV	#000060, R4
Z17232:	CALL	Z17200
	ADD	#000040, R4
	CMP	R4, #000200
	BMI	Z17232
	RETURN	
Z17252:	MOV	#000100, R4
Z17256:	CALL	Z17200
	ADD	#000003, R4
	CMP	R4, #000200
	BMI	Z17256
	RETURN	
Z17276:	MOV	#001000, R4
Z17302:	CALL	Z17200
	SUB	#000010, R4
	CMP	R4, #000600
	BPL	Z17302
	RETURN	
Z17322:	MOV	#000400, R4
	MOV	#000030, R3
Z17332:	CALL	Z17200
	SOB	R3, Z17332
	ASR	R4
	MOV	#000030, R3
Z17346:	CALL	Z17200
	SOB	R3, Z17346
	JMP	Z20236
Z17360:	MOV	#002000, R4
Z17364:	CALL	Z17200
	SUB	#000005, R4
	CMP	R4, #000600
	BPL	Z17364
Z17402:	RETURN	
;
Z17404:	INC	Z01704
Z17410:	MOV	Z01730, R0	; берём адрес в образе лабиринта
	TST	R1
	BEQ	Z17424
	JMP	Z06260
Z17424:	INC	R0
	CMPB	(R0), #000001
	BMI	Z17442
	CMPB	(R0), #000003
	BMI	Z17470
Z17442:	MOV	#000001, R4
	CALL	Z06460
	TST	Z01704
	BNE	Z17464
	MOV	R4, R3
Z17462:	RETURN	
Z17464:	TST	R5
	BNE	Z17462
Z17470:	JMP	Z10144

Z17502:	CALL	Z22770
	CALL	Z10106
Z17512:	RETURN	
;
Z17514:	CALL	Z11040
	CMP	Z11314, #000014
Z17526:	BNE	Z17534
;
Z17534:	MOV	#Z01714, R0	;
Z17540:	JMP	Z15402
; Подпрограмма ???; R4 = ???
Z17544:	MOV	Z01730, R5	; берём адрес в образе лабиринта
	CMP	R4, #000001
	BEQ	Z17564
	CMP	R4, #000003
	BNE	Z17660		; на выход
; R4 = 1 или 3
Z17564:	SUB	#Z11410, R5	; вычитаем начальный адрес, оставляя индекс
Z17570:	CMP	R5, #000036	;   меньше 30.? первая строка?
	BMI	Z17604		;   да => переходим
	SUB	#000036, R5	;   вычитаем 30. -- на строку выше
	BR	Z17570		;   повторяем
Z17604:	SUB	#000017, R5	; вычитаем 15. -- половину строки
	TST	R5
	BMI	Z17632		; меньше 0 => переходим
	CMP	R4, #000003
	BEQ	Z17660		; на выход
Z17622:	CMP	R5, #000015
	BHI	Z17644		; больше 13. => переходим
	BR	Z17660		; на выход
; R5 меньше нуля -- элемент в первой половине строки
Z17632:	NEG	R5		; меняем знак числа -- теперь это 1..15
	CMP	R4, #000001
	BEQ	Z17660		; на выход
	BR	Z17674
Z17644:	CLR	R5
	CLR     Z01734
	CLR     Z01736
	BR      Z17666
Z17660:	MOV	#000001, R5	; результат -- ???
	RETURN	
Z17666:	DEC     Z01736
	RETURN  
Z17674:	DEC	R5
	BR	Z17622
Z17700:	MOV	#000001, R4
	CALL	Z17544
	TST	R5
	BNE	Z17716
;
Z17716:	CALL	Z05500		; Вывод игрового объекта
	JMP	Z05610		; Вывод поверх следующего элемента
Z17726:	MOV	#000003, R4
	CALL	Z17544
	TST	R5
	BNE	Z17744		; R5 не 0 => переходим
	RETURN	
;
Z17744:	CALL	Z05500		; Вывод игрового объекта
Z17750:	JMP	Z05652		; Вывод поверх предыдущего элемента

	.BLKW	55		; ADDRESS ALIGNMENT GAP
; Подпрограмма: вывод 5-значного числа R4
Z20000::
	MOV	#000060, R0
	SUB	#023420, R4	; 10000.
	BMI	Z20016
Z20016:	ADD	#023420, R4
	CALL	TTYOUT		; вывести символ R0 на экран
	MOV	#000060, R0
	SUB	#001750, R4	; 1000.
	BMI	Z20042
Z20042:	ADD	#001750, R4	; готова цифра тысяч
	CALL	TTYOUT		; вывести символ R0 на экран
; Вход: вывести 3-значное число R4
Z20050:	MOV	#000060, R0
	SUB	#000144, R4	; 100.
	BMI	Z20066
Z20066:	ADD	#000144, R4	; Готова цифра сотен
	CALL	TTYOUT		; вывести символ R0 на экран
; Вход: вывести двузначное число R4
Z20074:	MOV	#000060, R0
Z20100:	SUB	#000012, R4
	BMI	Z20112
	INC	R0
	BR	Z20100
Z20112:	ADD	#000012, R4	; готова цифра десятков
	CALL	TTYOUT		; вывести символ R0 на экран
	MOV	#000060, R0
	ADD	R4, R0		; готова последняя цифра
	CALL	TTYOUT		; вывести символ R0 на экран
Z20130:	RETURN
;
SCOREP:	.BYTE	33,131,66,53,0	; Esc Y <стр>,<кол> -- курсор туда где очки
	.EVEN
; Подпрограмма: вывод статусной строки -- теперь здесь только очки
Z20172:
Z20236:
	MOV	#SCOREP, R1
	CALL	PRINT
	MOV	Z01776, R4	; получаем текущее количество очков
	JMP	Z20000		; Вывести 5-значное число R4
;
Z20302:	TST	Z01776		; количество очков нулевое?
Z20306:	BEQ	Z20314		; да => переходим
Z20310:	DEC	Z01776
Z20314:	RETURN	
;
Z20316:	CLR	Z01702		; Очищаем количество человеков
	MOV	#000232, R0	; ???
;	EMT	000016		; драйвер ТВ-монитора
Z20330:	RETURN	

; Подпрограмма: ???
Z20364:	CALL	Z17000
	CLR	Z11302
	RETURN	
; Подпрограмма ??? R2 = адес в растре, R3 = адрес в образе лабиринта
Z20376:	TST	Z01736		; равен нулю?
	BEQ	Z20422		; да => выводим как есть, иначе на 5 строк выше
	SUB	#400., R2	; минус 5 строк растра
	CALL	Z05500		; Вывод игрового объекта
	ADD	#400., R2	; плюс 5 строк растра
	BR	Z20426
Z20422:	CALL	Z05500		; Вывод игрового объекта
Z20426:	RETURN	
;
Z20430:	CALL	Z17276
	MOV	#000012, R2	; 10. раз
	MOV	R3, R5
Z20442:	RETURN	

Z20444: ; Печать надписи GAME OVER
	MOV	#Z20616, R1
	CALL	PRINT
Z20470:	JMP	Z20766

; Подпрограмма: ???
Z20540:	MOV	#000001, Z01770	; Номер лабиринта = 1
	CLR	Z11312
	RETURN
;
Z20554:	TST	Z11312
	BNE	Z20566
	JMP	Z15564
Z20566:	JMP	Z15714

Z20616: .BYTE	33,131,65,60	; Курсор в позицию
	.ASCIZ	/GAME OVER/
	.EVEN

Z20630:	CMP	Z01776, Z11316
	JMP	Z20444 ;STUB	BLE	Z20444

Z20670:	.ASCII	/RECORD/
	.EVEN

; Переход к следующему лабиринту?
Z20706:	INC	Z01770		; Номер лабиринта увеличиваем
	CMPB	Z01770, Z11300
	BMI	Z20730
	MOVB	Z01770, Z11300
Z20730:	RETURN
;
Z20732:	NOP	;TST	177662
Z20736:	JMP	Z11112

Z20744:	TST	(R2)
	BEQ	Z20760
	MOV	#024000, R0
Z20754:	SOB	R0, Z20754
	BR	Z20736
Z20760:	CLR	R0
Z20762:	SOB	R0, Z20762
Z20764:	RETURN	
Z20766:	MOV	#Z21162, R2
	CALL	Z20732
	NOP	
Z21000:	RETURN	

Z21162:	; Музыка в конце игры? размер уточнить
	.WORD	000222,000720,000222,000534,000222,000164,000222,000720
	.WORD	000172,000652,000202,000203,000202,000611,000222,000164
	.WORD	000222,000534,000232,000156,000222,000720,000000

; Установка курсора в (0,0) и очистка экрана	
Z21264:	CLR	R1
	CLR	R2
;	EMT	000024		; Установка курсора в (0,0)
	MOV	#043200, R0	; экран, начало 26. строки
Z21276:	CLR	(R0)+		;   очищаем 8 пикселей
	CMP	R0, #075000	;   экран, начало 232. строки
	BMI	Z21276		;   повторяем
Z21306:	RETURN
;
; Прерывание по клавише СТОП или зависанию (вектор 4)
; также сюда приходим после завершения игры
Z21310:	MOV	#001000, SP	; Инициализация стека
	NOP	
	NOP	
	NOP	
	MOV	#000040, R1	; По адресу 000040
	MOV	#000120, R2	; 80. слов, 160. байт
Z21332:	CLR	(R1)+		;   очищаем слово
	SOB	R2, Z21332	;   повторяем
	CALL	Z22720
Z21342:	BR	Z21350
;
Z21350:	TRAP	000000		; вывод строки
	.WORD	010000, 000006	; 
	MOV	#021630, 000274
Z21364:	JMP	Z01064		; Переход к формированию экрана меню


Z21636:	JMP	Z22046

; Цикл ожидания -- здесь крутимся после вывода картинки уровня
Z21642:	.TTINR			; есть символ на входе?
	BCC	Z21642		; да => повторяем выборку до очистки буфера
	.TTYIN			; теперь ожидаем
	BR	Z21654
Z21650:	.TTINR
Z21654:	SUB	#000060, R0
Z21660:	BMI	Z21676

Z21676:	RETURN	

; Обработчик прерывания TRAP (вектор 34)
Z21730:	MOV	R5, -(SP)
	MOV	R0, -(SP)
	MOV	000004(SP), R5	; Сохранённый CPC
	MOV	-(R5), R0	; Получаем команду вызвавшую TRAP
	MOVB	R0, R0		; Код TRAP = 0 ?
	BEQ	Z21760		; да => переходим
	CALL	102234		;TODO вызов EMT 16 - вывод символа из мл байта R0
Z21752:	MOV	(SP)+, R0
	MOV	(SP)+, R5
Z21756:	RTI			; возврат из прерывания
; TRAP 000000
Z21760:	MOV	R1, -(SP)
	MOV	R2, -(SP)
	TST	(R5)+		; пропускаем саму команду
	MOV	(R5)+, R1	; адрес строки символов
	MOV	(R5)+, R2	; длина мл байт, символ огр ст байт
	MOV	R5, 000010(SP)	; после этих двух слов место откуда продолжать
	CALL	107050		;TODO EMT 20 - вывод строки символов
	MOV	(SP)+, R2
	MOV	(SP)+, R1
Z22006:	BR	Z21752		; завершаем обработку TRAP
; Установка курсора по координатам
Z22010:	MOV	R5, -(SP)
	MOV	R1, -(SP)
	MOV	R2, -(SP)
	MOV	000006(SP), R5
	MOVB	(R5)+, R1
	MOVB	(R5)+, R2
	MOV	R5, 000006(SP)
	CALL	107272		;TODO EMT 24 - установка курсора по координатам
	MOV	(SP)+, R2
	MOV	(SP)+, R1
	MOV	(SP)+, R5
Z22044:	RTI			; возврат из прерывания
; ??? Что-то с клавиатурой
Z22046:	TST	@#177562	; регистр данных клавиатуры
	TST	Z01754
Z22056:	BNE	Z22064
Z22060:	JMP	Z21642		; Переходим к ожиданию нажатия клавиши
Z22064:	JMP	Z22752
;
	.BLKW	422		; ADDRESS ALIGNMENT GAP
; ??? данные -- игровые объекты
Z22070::
	.BLKW	276		;TODO: Уточнить, неясно сколько нужно
Z22072	= Z22070 + 2

Z22664:	BR	Z23032

Z22714:	JMP	Z20630		; Количество жизней 0

Z22720:	NOP;	COMB	@#000053
	NOP;	COM	@#000220
	NOP;	MOV	#021310, 000004	; задаём адрес вектора 4
	NOP;	CALL	100206		;TODO ???
	NOP;	MOV	#177777, 177714	;TODO в выходной регистр порта
Z22750:	RETURN	
;
Z22752:	NOP;STUB
	NOP;STUB

Z22764:	JMP	Z21650
;
Z22770:	TST	Z01754
	BNE	Z23004
	MOV	177562, R0	;TODO
Z23002:	RETURN	
Z23004: NOP;STUB	MOV	177714, R0
Z23010:	RETURN

Z23032:	TST	Z01756		; Количество жизней = 0 ?
Z23036:	BEQ	Z22714		; да => переходим
	RETURN	;STUB

Z23052:	CLR	Z01736
	CMPB	(R1), #000006
	BEQ	Z23066
	CLRB	(R1)
Z23066:	RETURN	

Z23150:	MOV	#000045, R5
	CALL	Z23224
	CMP	R3, #000003	; R3 >= 3 ?
	BPL	Z23176
Z23166:	MOV	R4, R3
	MOV	#000001, R5
Z23174:	RETURN	
;
Z23176:	CLR	R5
Z23200:	RETURN	
Z23202:	MOV	#000045, R5
	CALL	Z23224
	CMP	R3, #000003
	BMI	Z23176
	BR	Z23166
Z23222:	.WORD	0
Z23224:	MOV	Z23222, R3
	MOV	#000011, R2
Z23234:	ASL	R3
	SOB	R2, Z23234
	MOV	#000005, R2
Z23244:	SUB	Z23222, R3
	SOB	R2, Z23244
	MOV	#000017, R2
	XOR	R2, R3
	MOV	R3, Z23222
	BIC	#100000, R3
	CMP	R3, R5
	BLE	Z23312
	ASL	R5
Z23276:	CMP	R3, R5
	BLE	Z23306
	ASR	R3
	BR	Z23276
Z23306:	ASR	R5
	SUB	R5, R3
Z23312:	RETURN	

	.BLKW	324		; ADDRESS ALIGNMENT GAP
; Массив игровых объектов, следующий свободный адрес указан в 001720
Z24000::
	.BLKW	40	;TODO: Неясно сколько нужно места

	.BLKW	50		; ADDRESS ALIGNMENT GAP

.END	START
