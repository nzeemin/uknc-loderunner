	.TITLE	LODERUN
	.MCALL	.EXIT,.PRINT,.TTYOUT,.TTYIN

START:
	BIS     #010000, @#44	; Disable Ctrl-C

	CALL	Z01064

	.TTYIN

	.EXIT

MENUP:	.WORD	1		; Текущий пункт меню

Z01060:	;STUB
; Формирование экрана главного меню
Z01064:
	CLR	Z11306
	CLR	Z11304
	.PRINT	#MENU
	MOV	#1, MENUP
; Pause to let PPU finish the previous commands
;TODO: Нужно найти другой способ очистки, без ожидания
	MOV	#177777, R5
SU0:	NOP
	SOB	R5, SU0

Z01404:
	.TTYIN			; Ожидание нажатия клавиши
; Сюда приходим после нажатия клавиши в меню
Z01406:	MOV	MENUP, R2	; Текущий пункт меню
	CMPB	R0, #12		; Enter?
	BEQ	Z01430
	CMPB	R0, #40		; Пробел?
	BEQ	Z01430		; Да => переходим

Z01430:	CMP	R2, #1		; Пункт 1 ИГРА ?
	BNE	Z01446		; Нет => переходим
	CALL	Z14600		; ИГРА
	BR      Z01060
Z01446:
	RETURN	;STUB

MENU:
	.ASCII	<033>/%!0/<033>/LI@@3@@0@@0/<033>/%!3/
	.BYTE	14		; Clear screen

	.ASCII	/L O D E     R U N N E R/<25><25>
	.ASCII	/ 1 GAME/<25>
	.ASCII	/ 2 /<25>
	.ASCII	/ 3 /<25>
	.ASCII	/ 4 EXIT/
	.BYTE	15,34,34,34,200

TITLE:
	.ASCII	<033>/%!0/<033>/LI@@7@@0@@0/<033>/%!3/
	.BYTE	14,0		; Clear screen

	.BLKW	210		; ADDRESS ALIGNMENT GAP
X01700::
;
; Variables
;
Z01700:	.WORD	0		;
Z01702:	.WORD	0		; Количество людей??? очищается, инкрементируется
Z01704:	.WORD	0		; Адрес в образе лабиринта, инициализируется 011410
Z01706:	.WORD	0		; Адрес текущего слова для текущего лабиринта
Z01710:	.WORD	0		; Номер лабиринта; инициализируется из 001770
Z01712:	.WORD	0		; Счетчик строк при рисовании лабиринта: инициализируется 20., декрементируется
Z01714:	.WORD	0		; Адрес начала текущего лабиринта -- определения в виде триплетов; инициализируется 023640 + 240. * N
Z01716:	.WORD	0		; ??? адрес куда пишем по 5 слов, инициализируется 022070, для элемента 4 -- чертей
Z01720:	.WORD	0		; Адрес в растре: инициализируется 043202, добавляется по 640.
				;   в игровой логике: инициализируется 024000, сравнивается с 024000
Z01722:	.WORD	0		; ??? инициализируется 012600, 013160, 
Z01724:	.WORD	0		; ??? инициализируется 013660, 013704
; Запись об игровом объекте, из 5-ти слов, копируется из 011100
Z01726:	.WORD	0		; Адрес в растре
Z01730:	.WORD	0		; Адрес в образе лабиринта
Z01732:	.WORD	0		; ??? 0/1/2/3; 2 -- падаем
Z01734:	.WORD	0		; ??? 0/1/2/3/4
Z01736:	.WORD	0		; Смещение по высоте ??? если не 0 то спрайт выводится выше на 5 строк
Z01740:	.WORD	0		; ??? сравнивается с 011200
Z01742:	.WORD	0		; ???
Z01744:	.WORD	0		; ??? сравнивается с адресом в образе лабиринта
Z01746:	.WORD	0		; ???
Z01750:	.WORD	0		; ???
Z01752:	.WORD	0		; ???
Z01754:	.WORD	0		; ??? проверяется на 0
Z01756:	.WORD	0		; Количество жизней: инициализируется 10., декрементируется
Z01760:	.WORD	0		; ??? инициализируется 1, очищается, инкрементируется
Z01762:	.WORD	0		; Количество чертей; не больше 20.
Z01764:	.WORD	0		; ???
Z01766:	.WORD	0		; Количество сундуков осталось
Z01770:	.WORD	0		; Номер текущего уровня
Z01772:	.WORD	0
Z01774:	.WORD	0		; ??? инициализируется 011410 + байтовое значение, зависит от лабиринта
Z01776:	.WORD	0		; Текущее количество очков


	.BLKW	1014		; ADDRESS ALIGNMENT GAP
; Подпрограмма подготовки экрана: очистка, рисование рамки
Z04030::
	.PRINT	#TITLE		; Show title/version message
; Pause to let PPU finish the previous commands
;TODO: Нужно найти другой способ очистки, без ожидания
	MOV	#177777, R5
ST0:	NOP
	SOB	R5, ST0
; Рисование прямоугольной рамки игрового поля (80.,44.)-(560.,245.)
; Draw left/right lines
Z04036:	MOV	#103344, R1	; 100000 + 44.*50 + 40./8 - 1
	MOV	#103403, R2	; R1 + 240./8 + 1
	MOV	#202., R5	; Number of lines
1$:	MOV	R1, @#176640
	MOV	#100200, @#176642	; Left part
	ADD	#80., R1	; Next line
	MOV	R2, @#176640
	MOV	#0401, @#176642	; Right part
	ADD	#80., R2	; Next line
	SOB	R5, 1$
; Draw top/bottom lines
	MOV	#103345, R1
	MOV	#142665, R2	; R1 + 80.*201
	MOV	#30., R5	; 240./8
2$:	MOV	R1, @#176640
	MOV	#177777, @#176642
	INC	R1
	MOV	R2, @#176640
	MOV	#177777, @#176642
	INC	R2
	SOB	R5, 2$
Z04156:	RETURN

	.BLKW	304		; ADDRESS ALIGNMENT GAP
Z05000::
	NOP	
	CLR	Z01702		; Очищаем количество людей???
	CLR	Z01762		; Очищаем количество чертей
	CLR	Z01766		; Очищаем количество сундуков
	MOV	#Z22070, 001716	; Начало массива чертей
	MOV	#LEVELS-240., R1
	MOV	Z01710, R0	; Номер лабиринта
Z05034:	ADD	#000360, R1	; 240. байт занимает один лабиринт
	SOB	R0, Z05034	; повторяем пока не найдём нужный лабиринт
	MOV	R1, Z01714	; Сохраняем адрес начала текущего лабиринта
	MOV	#Z11410, Z01704	; Адрес начала образа лабиринта
	MOV	R1, Z01706	; Сохраняем адрес текущего лабиринта
	MOV	#103465, Z01720	; начальное значение (потом будем добавлять по 800.)
	MOV	#000024, Z01712	; 20. строк
; Цикл по строкам
Z05074:	MOV	Z01720, R3
	MOV	#6, R5		; 6 слов по 5 триплетов = 30 элементов в строке
; Цикл по R5 -- по словам
Z05104:	MOV	Z01706, R1	; Получаем адрес откуда читаем лабиринт
	MOV	(R1), R0	; Читаем очередное слово
	MOV	#5, R4		; 5 -- количество триплетов в слове
; Цикл по R4 -- по триплетам в слове
Z05116:	MOV	R0, R2
	BIC	#107777, R2	; оставить только биты 12-14 -- верхний триплет
	MOV	#000014, R1	; 12. раз
Z05130:	ROR	R2		; повторить битовый сдвиг вправо
	SOB	R1, Z05130	; в итоге оставленные биты передвинуты в 0-2 биты
; Дальше рисуем элемент для прочитанного триплета
	MOV	Z01704, R1	; Получаем адрес в образе лабиринта
	CMP	R2, #6		; R2 = 6 ? сундук?
	BNE	Z05160		; нет => переходим
; R2 = 6 -- сундук
	BR	Z05456
;
Z05154:	INC	Z01766		; количество сундуков
Z05160:	MOVB	R2, (R1)
	CMP	R2, #000004	; R2 = 4 ? это чёрт?
	BNE	Z05240		; Нет => переходим
; R2 = 4 -- чёрт
	CMP	Z01762, #000024	; чертей меньше 20. ?
	BMI	Z05210		; да => переходим
; Сохраняем чёртика
Z05210:	INC	Z01762		; чертей на один больше
	MOV	Z01716, R2	; Адрес 5-словной записи объекта
	MOV	R3, (R2)+	; сохраняем адрес в растре
	MOV	R1, (R2)+	; сохраняем адрес в образе лабиринта
	CLR	(R2)+
	CLR	(R2)+
	CLR	(R2)+
	MOV	R2, Z01716	; Сохраняем новый адрес
	BR	Z05422
; R2 != 4
Z05240:	BR	Z05430
; Создаём человечка: подготовка объекта из 5-ти слов по 011100
Z05242:	MOV	#Z11100, R2	; Адрес игровой записи
	MOV	R3, (R2)+	; Адрес в растре
	MOV	R1, (R2)+	; Адрес в образе лабиринта
	CLR	(R2)+
	CLR	(R2)+
	CLR	(R2)+
	MOV	#000005, R2	; 5 -- человечек
	MOVB	R2, (R1)	; пишем в образ лабиринта
	NOP	
; Переходим к следующему триплету
Z05270:	CLC			; Сдвигаем на три разряда влево
	ROL	R0              ; <
	ROL	R0              ; <
	ROL	R0              ; <
	CALL	Z16712
; Получаем адрес спрайта по индексу R2
Z05304:	MOV	#Z13540, R1	; Начало таблицы спрайтов
	TST	R2		
	BEQ	Z05322
Z05314:	ADD	#000024, R1	; Переход к следующему спрайту
	SOB	R2, Z05314
; Приступаем к рисованию спрайта; R1 = адрес спрайта в 10 слов -- 8x10 цветных пикселей
Z05322:	MOV	#000012, R2	; Повторить для 10. строк
Z05326:	MOV	R3, @#176640
	MOV	(R1)+, @#176642	; записываем 8 цветных пикселей в растр
	ADD	#80., R3	; плюс 80. -- переход к следующей строке растра
	SOB	R2, Z05326	; продолжаем цикл по строкам
	SUB	#799., R3	; минус 799. -- возвращаемся на 10. строк назад, плюс 8 цветных пикселей вперёд
	DEC	R4		; Уменьшаем счётчик триплетов
	BNE	Z05116		; Если не последний триплет, то переходим
	ADD	#000002, Z01706	; инкремент адреса откуда читаем -- к следующему слову
	DEC	R5		; цикл по словам
	BNE	Z05104		; переход если не закончили
; Закончили рисовать строку лабиринта
Z05360:	ADD	#800., Z01720	; добавляем 800.
	DEC	Z01712		; Продолжаем цикл по строкам
	BNE	Z05074		;   по значению (001712)
; Закончили рисовать лабиринт -- дальше какая-то подготовка адреса
Z05374:	MOV	Z01710, R2	; Берём номер лабиринта
	NOP	
	ADD	#Z11000, R2	; Добавляем адрес 011000
	MOVB	(R2), R3	; и получаем оттуда байт
	ADD	#Z11410, R3	; Добавляем адрес начала образа лабиринта
	MOV	R3, Z01774	; и сохраняем -- адрес выхода в лабиринте
	RETURN	
;
Z05422:	MOV	#000004, R2
	BR	Z05270		; Переходим к следующему триплету, спрайт и продолжаем
; R2 != 4
Z05430:	CMP	R2, #000005
	BNE	Z05270		; Переходим к следующему триплету, спрайт и продолжаем
; R2 = 5 -- человек
Z05436:	TST	Z01702		; Количество человеков нулевое?
	BEQ	Z05450		; да => переходим
;
Z05450:	INC	Z01702		; теперь есть один человек
	BR	Z05242		; Создаём человечка
; R2 = 6 -- сундук
Z05456:	TST	Z11306
	BEQ	Z05154

	.BLKW	13		; ADDRESS ALIGNMENT GAP
; Подпрограмма вывода игрового объекта: R2 = адрес в растре, R3 = адрес в образе лабиринта
Z05500::
	CMP	Z01720, #024000	; Начинаем с поиска игровых объектов
	BEQ	Z05526		; таких не было => выводим новый
	MOV	#024000, R4
Z05514:	CMP	(R4)+, R3	; это он?
	BEQ	Z05602		; да => выходим
	CMP	R4, Z01720	; перебрали все?
	BNE	Z05514		; нет => продолжаем
Z05526:	MOVB	(R3), R5	; получаем номер спрайта
	MOV	#Z13540, R4	; Начало таблицы спрайтов, по 10. слов на спрайт
	TSTB	R5		; спрайт #0 ?
	BEQ	Z05546		; да => переходим
Z05540:	ADD	#000024, R4	;   плюс 20. -- следующий спрайт
	SOB	R5, Z05540	;   повторяем
Z05546:	MOV	#000012, R5	; 10 раз
Z05552:	MOV	(R4)+, (R2)	;TODO:   выводим 8 цветных пикселей
	ADD	#000100, R2	;TODO:   плюс одна строка растра
	SOB	R5, Z05552	;   повторяем
	SUB	#001200, R2	;TODO: возвращаем адрес растра обратно на 10. строк вверх
	MOV	Z01720, R4	; Теперь запоминаем что объект выводился
	MOV	R3, (R4)	; сохраняем адрес в образе лабиринта
	ADD	#000002, Z01720
Z05602:	RETURN	
;
Z05604:	JMP	Z17700
; Вывод поверх следующего элемента
Z05610:	ADD	#000002, R2	;TODO: плюс 8 пикселей в растре
	INC	R3		; к следующему элементу
	CALL	Z05500		; Вывод игрового объекта
	SUB	#000002, R2	;TODO: минус 8 пикселей в растре
	MOV	#000012, R5	; 10 раз
Z05632:	BIS	(R0)+, (R2)+	;   выводим поверх
	BIS	(R0)+, (R2)	;   выводим поверх
	ADD	#000076, R2	;TODO:   следующая строка растра
	SOB	R5, Z05632	;   повторяем
Z05644:	RETURN	

Z05646:	JMP	Z17726
; Вывод поверх предыдущего элемента
Z05652:	SUB	#000002, R2	;TODO: минус 8 пикселей в растре
	DEC	R3		; к предыдущему элементу
	CALL	Z05500		; Вывод игрового объекта
	MOV	#000012, R5	; 10 раз
Z05670:	BIS	(R0)+, (R2)+	;   выводим поверх
	BIS	(R0)+, (R2)	;   выводим поверх
	ADD	#000076, R2	;TODO:   следующая строка растра
	SOB	R5, Z05670	;   повторяем
Z05702:	RETURN	
; Подпрограмма вывода ???; R2 = адрес в растре, R0 = адрес спрайта
Z05704:	CMP	R0, #012000	; R0 < 012000 ?
	BMI	Z05740		; да => вывод всего на 5 строк растра ниже
	ADD	#001200, R2	;TODO: плюс 10 строк в растре
	CALL	Z05500		; Вывод игрового объекта
	SUB	#001200, R2	;TODO: минус 10 строк в растре
	SUB	#000036, R3	; минус одна строка в образе лабиринта
	CALL	Z05500		; Вывод игрового объекта
	BR	Z05770
Z05740:	ADD	#000500, R2	;TODO: плюс 5 строк в растре
	CALL	Z05500		; Вывод игрового объекта
	SUB	#001200, R2	;TODO: минус 10 строк в растре
	SUB	#000036, R3	; минус одна строка в образе лабиринта
	CALL	Z05500		; Вывод игрового объекта
	ADD	#000500, R2	;TODO: плюс 5 строк в растре
Z05770:	MOV	#000012, R5	; 10 раз
Z05774:	BIS	(R0)+, (R2)	;TODO:   рисуем поверх
	ADD	#000100, R2	;TODO:   следующая строка растра
	SOB	R5, Z05774	;   повторяем
Z06004:	RETURN	
; Подпрограмма вывода ???; R2 = адрес в растре, R0 = адрес спрайта
Z06006:	CMP	R0, #012000	; R0 < 012000 ?
	BMI	Z06046		; да => вывод всего на 5 строк выше
	SUB	#001200, R2
	CALL	Z05500		; Вывод игрового объекта
	ADD	#001200, R2	;TODO: плюс 10 строк растра
	ADD	#000036, R3	; плюс одна строка в образе лабиринта
	NOP	
	NOP	
	CALL	Z05500		; Вывод игрового объекта
	BR	Z06076
Z06046:	SUB	#000500, R2	;TODO: минус 5 строк растра
	CALL	Z05500		; Вывод игрового объекта
	ADD	#001200, R2	;TODO: плюс 10 строк растра
	ADD	#000036, R3	; плюс одна строка в образе лабиринта
	CALL	Z05500		; Вывод игрового объекта
	SUB	#000500, R2	;TODO: минус 5 строк растра
Z06076:	MOV	#000012, R5	; 10 раз
Z06102:	BIS	(R0)+, (R2)	;TODO:   рисуем поверх
	ADD	#000100, R2	;   следующая строка растра
	SOB	R5, Z06102	;   повторяем
Z06112:	RETURN	
; Подпрограмма ??? игровая логика; R0 = адрес в образе лабиринта
Z06114:	CMP	R1, #000001
	BNE	Z06130
	CALL	Z06152
	BR	Z06150
Z06130:	CMP	R1, #000003
	BNE	Z06144
	CALL	Z06152
	BR	Z06150
Z06144:	CALL	Z16366
Z06150:	RETURN	
; Подпрограмма ??? игровая логика
Z06152:	ADD	#000036, R0	; к следующей строке лабиринта
	TSTB	(R0)		; пустой элемент ?
	BNE	Z06172		; нет => переходим
	MOV	#000002, Z01732	; состояние -- падаем
	BR	Z06334		; на выход
Z06172:	CMPB	(R0), #000007	; под нами лестница ?
	BNE	Z06214		; нет => переходим
	MOV	#000002, R4
	CALL	Z06460
	TST	R5
	BNE	Z06334		; на выход
Z06214:	SUB	#000036, R0	; возвращаемся к текущему элементу лабиринта
	CMPB	(R0), #000007	; лестница ?
	BNE	Z06254		; нет => переходим
	SUB	#000036, R0	; к предыдущей строке лабиринта
	CMPB	(R0), #000007	; лестница ?
	BNE	Z06254		; нет => переходим
	MOV	#000004, R4
	CALL	Z06460
	TST	R5
	BNE	Z06334		; на выход
Z06254:	JMP	Z17404
	INC	R0
	CMP	R1, #000001
	BEQ	Z06274
	SUB	#000002, R0
Z06274:	CMPB	(R0), #000001
	BMI	Z06332
	CMPB	(R0), #000002
	BHI	Z06332
	CMP	R1, #000001
	BNE	Z06324
	MOV	#000003, R3
	BR	Z06334		; на выход
Z06324:	MOV	#000001, R3
	BR	Z06334		; на выход
Z06332:	MOV	R1, R3
Z06334:	RETURN	
;
Z06336:	JMP	Z16422
Z06404:	CMP	R1, #000002
	BNE	Z06420	
	ADD	#000037, R0	; к следующей строке +1 элемент
	BR	Z06424
Z06420:	SUB	#000035, R0	; к предыдущей строке +1 элемент
Z06424:	CMPB	(R0), #000007	; лестница ?
	BNE	Z06436		; нет => переходим
	MOV	R1, R3
	BR	Z06456
Z06436:	CMP	R1, #000002
	BNE	Z06452
	MOV	#000004, R3
Z06450:	BR	Z06456
Z06452:	MOV	#000002, R3
Z06456:	RETURN	
; Подпрограмма ???
Z06460:	MOV	Z11102, R2
	CALL	Z06572
	MOV	R3, R5
	MOV	R2, Z01706
	MOV	R0, R2
	CALL	Z06572
	CMP	R3, R5
	BMI	Z06520
	CMP	R4, #000004
	BEQ	Z06562
	BR	Z06532
Z06520:	CMP	R3, R5
	BEQ	Z06532
	CMP	R4, #000002
	BEQ	Z06562
Z06532:	CMP	R2, Z01706
	BMI	Z06550
	CMP	R4, #000003
	BEQ	Z06562
	BR	Z06556
Z06550:	CMP	R4, #000001
	BEQ	Z06562
Z06556:	JMP	023150
Z06562:	JMP	023202
Z06570:	RETURN	
; Подпрограмма ???
Z06572:	CLR	R3
	SUB	#Z11410, R2	; убираем адрес начала лабиринта, оставляя индекс
Z06600:	INC	R3
	CMP	R2, #000036	; R2 < 30. ?
	BMI	Z06570		; переход на RETURN
	SUB	#000036, R2	; минус 30. -- к предыдущей строке лабиринта
Z06614:	BR	Z06600
; Подпрограмма ???
Z06616:	MOV	Z01730, R3	; Адрес в образе лабиринта
	MOV	Z01726, R2	; Адрес в растре
	CALL	Z20376
	NOP	
	NOP	
	ADD	#000500, R2	;TODO: ниже на 5 строк растра
	MOV	#000012, R5	; 10. раз
Z06646:	MOV	(R0)+, (R2)	;TODO:   выводим 8 цветных пикселей
	ADD	#000100, R2	;TODO:   плюс одна строка растра
	SOB	R5, Z06646	;   повторяем
	SUB	#001200, R2	;TODO: возвращаемся на 10. строк выше
	MOV	R2, Z01726	; сохраняем новый адрес в растре
	INC	Z01736
	CMP	Z01736, #000002
	BNE	Z06760		; не равно => переход на RETURN
; R2 = 30.
Z06702:	CLR	Z01736
	MOV	Z01730, R2	; берём адрес в образе лабиринта
	ADD	#000036, Z01730	; добавляем 30. -- к следующей строке
	ADD	#000074, R2	; плюс 60. -- на две строки вниз
	BR	Z06762
Z06730:	TST	Z01760
	BNE	Z06744
	CMPB	(R2), #000010
	BEQ	Z06756
Z06744:	CLR	Z01732
	CLR	Z01734
	BR	Z06760
Z06756:	RETURN	;STUB
Z06760:	RETURN	
Z06762:	TSTB	(R2)
	BEQ	Z06760
	CMPB	(R2), #000006
	BEQ	Z06760
Z06774:	BR	Z06730
; Подпрограмма ??? игровая логика; по адресу 001726 игровой объект из 5-ти слов
Z07000:	MOV	#013160, Z01722
	MOV	#013704, Z01724
	MOV	#024000, Z01720
	MOV	Z01732, R0	; берём состояние объекта
	CMP	R0, #000001
	BNE	Z07040
;
Z07040:	CMP	R0, #000002	; падаем ?
	BNE	Z07062		; нет => переходим
	MOV	Z01724, R0
	CALL	Z06616
	JMP	Z07776
Z07062:	JMP	Z16336

Z07132:	TSTB	177660		;TODO: Нажата клавиша?
	BPL	Z07262		; нет => переходим
	MOV	177662, R0	;TODO: код нажатой клавиши
	CMPB	R0, Z01752
	BNE	Z07262
	MOV	Z01730, R1	; берём адрес в образе лабиринта
	ADD	#000036, R1	; к следующей строке лабиринта
	CMPB	(R1), #000002	; под нами кирпичная стена ?
	BNE	Z07262		; нет => переходим
	CMP	Z01740, #011270
	BHI	Z07262
	JMP	Z16252
	NOP	
	CALL	Z17014
	CALL	Z17102
	MOV	#000012, R5	; 10. раз
Z07222:	CLR	(R2)		;TODO:   очищаем 8 пикселей
	ADD	#000100, R2	;TODO:   к следующей строке
	SOB	R5, Z07222	;   повторяем
	MOVB	#000010, (R1)
	MOV	Z01740, R3
	MOV	R1, (R3)+
	SUB	#001200, R2	;TODO: на 10. строк выше
	MOV	R2, (R3)+
	MOV	Z11310, (R3)+
	MOV	R3, 001740
Z07262:	CALL	Z17502
	MOV	Z01730, R1	; берём адрес в образе лабиринта
	ADD	#000036, R1	; добавляем 30. -- к следующей строке
	JMP	Z16300
	CMPB	(R1), #000010
	BNE	Z07336
; Вход: переходим сюда когда под игровым объектом пусто -- проваливается
Z07310:	MOV	#000002, Z01732	; состояние -- падаем
	CALL	Z23052
	MOV	Z01724, R0
	CALL	Z06616
	JMP	Z07776
Z07336:	MOV	Z01730, R1	; берём адрес в образе лабиринта
	CMP	R0, Z01744
	BNE	Z07570
; Вход: ???
Z07350:	DEC	R1
	CMPB	(R1), #000001
	BMI	Z07366
	CMPB	(R1), #000003
	BMI	Z07560
Z07366:	CMP	Z01734, #000003
	BEQ	Z07452
	TST	Z01736
	BEQ	Z07452
Z07410:	CMP	Z01734, #000003
	BNE	Z07430
	CLR	Z01734
	JMP	Z16204
Z07430:	JMP	Z14572
;
Z07452:	MOV	Z01730, R3	; берём адрес в образе лабиринта
	MOV	Z01726, R2	; берём адрес в растре
	CALL	Z15672
	MOV	Z01736, R5
	TST	R5
	BEQ	Z07504
Z07476:	ADD	#000050, R0
	SOB	R5, Z07476
Z07504:	CALL	Z05646
	INC	Z01736
	CMP	Z01736, #000003
	BNE	Z07546
	SUB	#000002, Z01726	; на 8 цветных пикселей левее
	DEC	Z01730		; адрес в лабиринте -- к предыдущему элементу
	CLR	Z01732
	CLR	Z01736
Z07546:	MOV	#000003, Z01734
	JMP	Z07776
Z07560:	JMP	Z07410

Z07570:	CMP	R0, Z01742
	BNE	Z07772
Z07576:	INC	R1
	CMPB	(R1), #000001
	BMI	Z07614
	CMPB	(R1), #000003
	BMI	Z07636
Z07614:	CMP	Z01734, #000001
	BEQ	Z07676
	TST	Z01736
	BEQ	Z07676
Z07636:	CMP	Z01734, #000001
	BNE	Z07656
	CLR	Z01734
	JMP	Z16204
Z07656:	JMP	Z14572
Z07676:	MOV	Z01730, R3	; берём адрес в образе лабиринта
	MOV	Z01726, R2	; берём адрес в растре
	MOV	Z01722, R0
	MOV	Z01736, R5
	TST	R5
	BEQ	Z07730
Z07722:	ADD	#000050, R0
	SOB	R5, Z07722
Z07730:	CALL	Z05604
	INC	Z01736
	CMP	Z01736, #000003
	BEQ	Z07762
Z07750:	MOV	#000001, Z01734
	JMP	Z07776
Z07762:	CLR	Z01732
	JMP	Z14044
Z07772:	JMP	Z14066
Z07776:	RETURN	


Z10106:	TST	Z11110
	BNE	Z10120
	MOV	R0, Z11314
Z10120:	RETURN	
Z10122:	ADD	#000036, R1
	CMPB	(R1), #000003
	BNE	Z10140
	JMP	Z14376
Z10140:	JMP	Z14362
	SUB	#000002, R0
	CMPB	(R0), #000001
	BMI	Z10164
	CMPB	(R0), #000003
	BMI	Z10212
Z10164:	MOV	#000003, R4
	CALL	Z06460
	TST	Z01704
	BNE	Z10206
Z10204:	RETURN	
;
Z10206:	TST	R5
	BNE	Z10204
Z10212:	ADD	#000037, R0
	CMPB	(R0), #000006
	BMI	Z10250
Z10250:	SUB	#000036, R0
	CMPB	(R0), #000007
	BNE	Z10316
Z10316:	TST	Z01704
	BEQ	Z10334
	CLR	Z01704
Z10330:	JMP	Z17410

Z10334:	RETURN	;STUB

Z11000:	.BLKW	40		;TODO: Уточнить, неясно сколько нужно

Z11100:	.BLKW	40		;TODO: Уточнить, неясно сколько нужно
Z11102	= Z11100 + 2
Z11110	= Z11100 + 10

Z11302:	.WORD	0		; ??? очищается, инкрементируется, сравнивается с 10.
Z11304:	.WORD	0		; ??? очищается, инкрементируется
Z11306:	.WORD	0		; ??? очищается, инкрементируется
Z11310:	.WORD	0		; ???
Z11312:	.WORD	0		; ???

Z11314:	RETURN	;STUB

; Образ текущего лабиринта, байт на элемент, 30. байт на строку, 600 байт всего
Z11410::
	.BLKB	600.

Z13540:
	.WORD	000000,000000,000000,000000,000000,000000,000000,000000,000000,000000
	.WORD	177400,177400,177400,177400,177400,177400,177400,177400,177400,177400
	.WORD	175773,175773,175773,175773,000000,157737,157737,157737,157737,000000
	.WORD	177777,000000,000000,000000,000000,000000,000000,000000,000000,000000
	.WORD	006014,026455,024445,037477,017036,017036,006014,011022,011022,011022
	.WORD	006014,026455,024445,017036,006014,006014,010002,011022,011022,031463
	.WORD	000000,006014,015022,032441,032445,037477,037477,037477,037477,000000
	.WORD	020441,020441,037477,020441,020441,020441,020441,037477,020441,020441

Z14044:	ADD	#000002, Z01726	; Плюс одно слово для адреса в растре
	INC	Z01730		; К следующему элементу в образе лабиринта
	CLR	Z01736
	JMP	Z07750
Z14066:	CMP	R0, Z01746
	BNE	Z14350
	CMPB	(R1), #000007
	BNE	Z14264
	SUB	#000036, R1
	CMPB	(R1), #000007
	BNE	Z14260
	CMP	Z01734, #000004
	BEQ	Z14140
	TST	Z01736
	BEQ	Z14140
Z14140:	MOV	Z01730, R3	; берём адрес в образе лабиринта
	NOP	
	NOP	
	TST	Z01736
	BNE	Z14164
	MOV	#010700, R0
	BR	Z14170
Z14164:	MOV	#013660, R0
Z14170:	TST	Z01760
	BNE	Z14202
	ADD	#000024, R0
;
Z14202:	SUB	#000500, Z01726	; Адрес растра на 5 строк выше
	CALL	Z15716
	INC	Z01736
	CMP	Z01736, #000002
	BNE	Z14246
	SUB	#000036, Z01730	; Адрес в лабиринте -- на строку выше
	CLR	Z01732
	CLR	Z01736
Z14246:	MOV	#000004, Z01734
	JMP	Z07776
Z14260:	ADD	#000036, R1
Z14264:	MOV	Z01734, R0
	TST	R0
	BEQ	Z14344
	CMP	R0, #000004
	BNE	Z14312
	CLR	Z01734
	JMP	Z16204
Z14312:	CMP	R0, #000001
	BNE	Z14324
	JMP	Z07576
Z14324:	CMP	R0, #000002
	BEQ	Z14356
	CMP	R0, #000003
	BNE	Z14344
	JMP	Z07350
Z14344:	JMP	Z07776
Z14350:	CMP	R0, Z01750
	BNE	Z14554
Z14356:	JMP	Z10122
Z14362:	CMPB	(R1), #000007
	BEQ	Z14376
	SUB	#000036, R1
	BR	Z14544
Z14376:	CMP	Z01734, #000002
	BEQ	Z14424
	TST	Z01736
	BEQ	Z14424
Z14424:	MOV	Z01730, R3	; берём адрес в образе лабиринта
;TODO

; Подпрограмма: вызывается по выбору пункта ИГРА в меню
Z14600:	MOV	#000012, Z01756	; 10. -- начальное количество жизней
	CALL	Z20540		; Сбрасываем Номер лабиринта в 1
	NOP	
	CALL	Z20364
	CALL	Z16752
; Вход: после очередной смерти человечка
Z14624:	MOV	Z01770, Z01710	; Номер лабиринта
	CALL	Z04030		; очистка экрана и рисование рамки игрового поля
	CALL	Z15760		; Отрисовать лабиринт
;TODO	CALL	Z21636		; ??? Переход к ожиданию перед игрой
;TODO
	RETURN		;STUB


; Подпрограмма ???
Z15760:	CALL	Z05000		; Рисование лабиринта
	INC	Z11306
	RETURN

Z16366:	RETURN	;STUB

Z16712:	INC	Z01704
	TST	Z11304
	BEQ	Z16742
	CMP	R2, #000004
	BEQ	Z16740
	CMP	R2, #000005
	BNE	Z16742
Z16740:	CLRB	(R1)
Z16742:	RETURN	


; Подпрограмма: ???
Z16752:	CLR	Z01776		; Обнуляем количество очков
	INC	Z11304
	RETURN	

; Подпрограмма: ???
Z17000:	CALL	Z20316
	MOV	#000070, Z11310
	RETURN	

;
Z20316:	CLR	001702		; Очищаем количество человеков
	MOV	#000232, R0	; ???
;	EMT	000016		; драйвер ТВ-монитора
Z20330:	RETURN	

; Подпрограмма: ???
Z20364:	CALL	Z17000
	CLR	Z11302
	RETURN	

; Подпрограмма: ???
Z20540:	MOV	#000001, Z01770	; Номер лабиринта = 1
	CLR	Z11312
	RETURN


Z21636:	JMP	Z22046

Z21642:	TSTB	177660 ;TODO	; проверка нажатия клавиши
	BPL	Z21642		; не нажата => ждём дальше
	MOV	177662, R0 	;TODO
	SUB	#000060, R0
Z21660:	BMI	Z21676
Z21676:	RETURN	


;
Z22046:	TST	@#177662	;TODO
	TST	Z01754
	BNE	Z22064
Z22060:	JMP	Z21642
Z22064:				;TODO

Z22070:	.BLKW	10		;TODO: Уточнить, неясно сколько нужно

.END	START
